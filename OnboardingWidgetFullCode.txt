<!DOCTYPE html>
<html>

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Client Onboarding Widget</title>
    <link rel="stylesheet" href="widget.css">
    <!-- Keep all existing CSS styles -->
</head>

<body>
    <div class="widget-header">
        <h1>Client Onboarding Portal</h1>
        <!-- <p id="headerSubtitle">Complete your investment account opening process step by step</p> -->
        <!-- Add dynamic layout heading -->
        <div id="layoutHeading" class="layout-heading" style="display: none;">
            <h2 id="layoutTitle"></h2>
            <p id="layoutDescription"></p>
        </div>
    </div>

    <div class="progress-container">
        <div class="progress-bar">
            <div class="progress-fill" id="progressFill"></div>
        </div>
        <div class="step-indicators" id="stepIndicators">
            <!-- Make step indicators clickable -->
            <div class="step-indicator active" data-step="1" onclick="goToStep(1)"><span>First Holder</span></div>
            <div class="step-indicator" data-step="2" onclick="goToStep(2)"><span>Second Holder</span></div>
            <div class="step-indicator" data-step="3" onclick="goToStep(3)"><span>Third Holder</span></div>
            <div class="step-indicator" data-step="4" onclick="goToStep(4)"><span>Investment</span></div>
        </div>
    </div>

    <div class="form-container">
        <div id="loadingScreen" class="loading hidden">
            <div class="spinner"></div>
            <!-- <p>Loading your data...</p> -->
        </div>

        <div id="statusContainer" class="hidden">
            <div id="statusBadge" class="status-badge"></div>
        </div>

        <!-- Tab Content Container - This will show one step at a time -->
        <div class="tab-content-container">
            <form id="onboardingForm">
                <input type="hidden" id="recordId" name="recordId">
                <input type="hidden" id="recordStatus" name="recordStatus" value="draft">

                <!-- Step 1: First Holder -->
                <div class="form-step active" data-step="1" style="display: block;">
                    <h2 class="step-title">First/Sole Holder</h2>

                    <!-- Identity Details - First/Sole Holder (Starting section) -->
                    <div class="section-group">
                        <div class="section-title">IDENTITY DETAILS - First/Sole Holder</div>

                        <table class="form-table">
                            <tbody>
                                <tr>
                                    <td colspan="2">
                                        <div class="form-group">
                                            <label for="nameOfApplicant" class="required-field">Name of
                                                Applicant</label>
                                            <input type="text" id="nameOfApplicant" name="nameOfApplicant" required>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="fh_fatherSpouseName" class="required-field">Father's/Spouse's
                                                name</label>
                                            <input type="text" id="fh_fatherSpouseName" name="fh_fatherSpouseName"
                                                required>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="fh_motherName" class="required-field">Mother's Name</label>
                                            <input type="text" id="fh_motherName" name="fh_motherName" required>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="fh_dateOfBirth" class="required-field">Date of Birth</label>
                                            <input type="date" id="fh_dateOfBirth" name="fh_dateOfBirth" required>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="fh_maritalStatus" class="required-field">Marital Status</label>
                                            <select id="fh_maritalStatus" name="fh_maritalStatus" required>
                                                <option value="-None-">-None-</option>
                                                <option value="Single">Single</option>
                                                <option value="Married">Married</option>
                                                <option value="Others">Others</option>
                                            </select>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="secondaryEmail">Secondary Email</label>
                                            <input type="email" id="secondaryEmail" name="secondaryEmail">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="fh_gender" class="required-field">Gender</label>
                                            <select id="fh_gender" name="fh_gender" required>
                                                <option value="-None-">-None-</option>
                                                <option value="Male">Male</option>
                                                <option value="Female">Female</option>
                                                <option value="Transgender">Transgender</option>
                                            </select>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="fh_citizenship" class="required-field">Citizenship</label>
                                            <select id="fh_citizenship" name="fh_citizenship" required>
                                                <option value="Indian">Indian</option>
                                                <option value="NRI">NRI</option>
                                                <option value="PIO">PIO</option>
                                                <option value="Foreign">Foreign</option>
                                            </select>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="email" class="required-field">Email</label>
                                            <input type="email" id="email" name="email" required>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="fh_typeOfAccount">Type of Account</label>
                                            <select id="fh_typeOfAccount" name="fh_typeOfAccount">
                                                <option value="-None-">-None-</option>
                                                <option value="Resident">Resident</option>
                                                <option value="NRO">NRO</option>
                                                <option value="NRE">NRE</option>
                                            </select>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="fh_residentialStatus" class="required-field">Residential
                                                Status</label>
                                            <select id="fh_residentialStatus" name="fh_residentialStatus" required>
                                                <option value="-None-">-None-</option>
                                                <option value="Resident Individual">Resident Individual</option>
                                                <option value="Non-Resident Individual">Non-Resident Individual
                                                </option>
                                                <option value="Foreign National">Foreign National</option>
                                                <option value="Person of Indian Origin">Person of Indian Origin
                                                </option>
                                            </select>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="fh_pan" class="required-field">PAN</label>
                                            <input type="text" id="fh_pan" name="fh_pan"
                                                pattern="[A-Z]{5}[0-9]{4}[A-Z]{1}" placeholder="ABCDE1234F" required>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="fh_gstNo">GST No</label>
                                            <input type="text" id="fh_gstNo" name="fh_gstNo">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="fh_uidAadhaar" class="required-field">UID / Aadhaar No</label>
                                            <input type="text" id="fh_uidAadhaar" name="fh_uidAadhaar"
                                                pattern="[0-9]{12}" placeholder="123456789012" required>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="fh_ckyc">CKYC No</label>
                                            <input type="text" id="fh_ckyc" name="fh_ckyc">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="fh_tan">TAN</label>
                                            <input type="text" id="fh_tan" name="fh_tan">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="emailOptOut">Email Opt Out</label>
                                            <select id="emailOptOut" name="emailOptOut">
                                                <option value="No">No</option>
                                                <option value="Yes">Yes</option>
                                            </select>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="exchangeRate">Exchange Rate</label>
                                            <input type="number" id="exchangeRate" name="exchangeRate" step="0.01">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="currency">Currency</label>
                                            <select id="currency" name="currency">
                                                <option value="INR">INR</option>
                                                <option value="SGD">SGD</option>
                                                <option value="USD">USD</option>
                                                <option value="AED">AED</option>
                                                <option value="GBP">GBP</option>
                                                <option value="EUR">EUR</option>
                                            </select>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="investorDistributorType">Investor/Distributor Type</label>
                                            <select id="investorDistributorType" name="investorDistributorType">
                                                <option value="-None-">-None-</option>
                                                <option value="Investor">Investor</option>
                                                <option value="Distributor">Distributor</option>
                                            </select>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="salesType">Sales Type</label>
                                            <select id="salesType" name="salesType">
                                                <option value="-None-">-None-</option>
                                                <option value="Direct">Direct</option>
                                                <option value="Channel">Channel</option>
                                                <option value="Offshore">Offshore</option>
                                            </select>
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                    <!-- Hidden fields for Lookups and Status (not displayed in form) -->
                    <div style="display: none;">
                        <input type="hidden" id="leadLookup" name="leadLookup">
                        <input type="hidden" id="familyLookup" name="familyLookup">
                        <input type="hidden" id="investorLookup" name="investorLookup">
                        <!-- <input type="hidden" id="onboardingStatus" name="onboardingStatus" value="Draft"> -->
                        <!-- <input type="hidden" id="opportunity" name="opportunity"> -->
                    </div>

                    <!-- Space for next section you'll provide -->
                    <!-- Next section will be added here -->

                    <!-- INCOME DETAILS - First/Sole Holder -->
                    <div class="section-group">
                        <div class="section-title">INCOME DETAILS - First/Sole Holder</div>

                        <table class="form-table">
                            <tbody>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="fh_netWorth" class="required-field">Net worth (Not older than 1
                                                year)</label>
                                            <input type="number" id="fh_netWorth" name="fh_netWorth" step="0.01" min="0"
                                                required>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="fh_asOnDate" class="required-field">As on Date</label>
                                            <input type="date" id="fh_asOnDate" name="fh_asOnDate" required>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="fh_incomeRange" class="required-field">Income Range (per
                                                annum)</label>
                                            <select id="fh_incomeRange" name="fh_incomeRange" required>
                                                <option value="-None-">-None-</option>
                                                <option value="Below Rs.1 Lakh">Below Rs.1 Lakh</option>
                                                <option value="Rs. 1 Lakh to Rs. 5 Lakhs">Rs. 1 Lakh to Rs. 5 Lakhs
                                                </option>
                                                <option value="Rs. 5 Lakhs to Rs. 10 Lakhs">Rs. 5 Lakhs to Rs. 10
                                                    Lakhs</option>
                                                <option value="Rs. 10 Lakhs to 25 Lakhs">Rs. 10 Lakhs to 25 Lakhs
                                                </option>
                                                <option value="Rs. 25 Lakhs">>Rs. 25 Lakhs</option>

                                            </select>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="fh_occupation" class="required-field">Occupation</label>
                                            <select id="fh_occupation" name="fh_occupation" required>
                                                <option value="-None-">-None-</option>
                                                <option value="Private Sector">Private Sector</option>
                                                <option value="Public Sector">Public Sector</option>
                                                <option value="Govt. Services">Govt. Services</option>
                                                <option value="Business">Business</option>
                                                <option value="Professional">Professional</option>
                                                <option value="Housewife">Housewife</option>
                                                <option value="Retired">Retired</option>
                                                <option value="Student">Student</option>
                                                <option value="Others">Others</option>
                                            </select>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="fh_pleaseSelectStatus">Please select Status</label>
                                            <select id="fh_pleaseSelectStatus" name="fh_pleaseSelectStatus">
                                                <option value="-None-">-None-</option>
                                                <option value="Politically Exposed Person (PEP)">Politically Exposed
                                                    Person (PEP)
                                                </option>
                                                <option value="Related to Politically Exposed Person (RPEP)">Related
                                                    to
                                                    Politically
                                                    Exposed Person (RPEP)</option>
                                                <option value="Not Applicable">Not Applicable</option>
                                            </select>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="fh_sourcesOfFunds" class="required-field">Sources of
                                                Funds</label>
                                            <select id="fh_sourcesOfFunds" name="fh_sourcesOfFunds" required>
                                                <option value="-None-">-None-</option>
                                                <option value="Own & Family">Own & Family</option>
                                                <option value="Borrowed">Borrowed</option>
                                            </select>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="fh_natureOfBusinessProfession">Nature of Business
                                                Profession</label>
                                            <input type="text" id="fh_natureOfBusinessProfession"
                                                name="fh_natureOfBusinessProfession"
                                                placeholder="Enter nature of business or profession">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="fh_overallInvestmentGoals">Overall Investment Goals</label>
                                            <select id="fh_overallInvestmentGoals" name="fh_overallInvestmentGoals">
                                                <option value="-None-">-None-</option>
                                                <option value="Capital Appreciation & Regular Income">Capital
                                                    Appreciation & Regular Income</option>
                                                <option value="Regular Income">Regular Income</option>
                                            </select>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="fh_typeOfCompanyFirm">Type of Company/Firm</label>
                                            <select id="fh_typeOfCompanyFirm" name="fh_typeOfCompanyFirm">
                                                <option value="-None-">-None-</option>
                                                <option value="Sole Proprietorship">Sole Proprietorship</option>
                                                <option value="Partnership">Partnership</option>
                                                <option value="Limited Liability Partnership (LLP)">Limited
                                                    Liability
                                                    Partnership
                                                    (LLP)</option>
                                                <option value="Private Limited Company">Private Limited Company
                                                </option>
                                                <option value="Public Limited Company">Public Limited Company
                                                </option>
                                                <option value="One Person Company (OPC)">One Person Company (OPC)
                                                </option>
                                                <option value="Trust">Trust</option>
                                                <option value="Society">Society</option>
                                                <option value="Co-operative Society">Co-operative Society</option>
                                                <option value="Not Applicable">Not Applicable</option>
                                                <option value="Others">Others</option>
                                            </select>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="fh_pleaseSelectStatus2">Please select Status</label>
                                            <select id="fh_pleaseSelectStatus2" name="fh_pleaseSelectStatus2">
                                                <option value="-None-">-None-</option>
                                                <option value="Politically Exposed Person (PEP)">Politically Exposed
                                                    Person (PEP)
                                                </option>
                                                <option value="Related to Politically Exposed Person (RPEP)">Related
                                                    to
                                                    Politically
                                                    Exposed Person (RPEP)</option>
                                                <option value="Not Applicable">Not Applicable</option>
                                            </select>
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                    <!-- Contact Details - First/Sole Holder -->
                    <div class="section-group">
                        <div class="section-title">CONTACT DETAILS - First/Sole Holder</div>
                        <table class="form-table">
                            <tbody>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="fh_mobileNo" class="required-field">Mobile No.</label>
                                            <input type="tel" id="fh_mobileNo" name="fh_mobileNo" pattern="[0-9]{10}"
                                                required>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="fh_landlineNo">Landline No.</label>
                                            <input type="tel" id="fh_landlineNo" name="fh_landlineNo">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td colspan="2">
                                        <div class="form-group">
                                            <label for="fh_emailId">Email ID</label>
                                            <input type="email" id="fh_emailId" name="fh_emailId">
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                    <!-- Proof of Identity - First/Sole Holder -->
                    <div class="section-group">
                        <div class="section-title">PROOF OF IDENTITY - First/Sole Holder</div>
                        <table class="form-table">
                            <tbody>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="fh_passportNumber" class="required-field">A - Passport
                                                Number</label>
                                            <input type="text" id="fh_passportNumber" name="fh_passportNumber" required>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="fh_passportExpiryDate">Passport Expiry Date</label>
                                            <input type="date" id="fh_passportExpiryDate" name="fh_passportExpiryDate">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="fh_voterID">B - Voter ID</label>
                                            <input type="text" id="fh_voterID" name="fh_voterID">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="fh_panCard">C - PAN card</label>
                                            <input type="text" id="fh_panCard" name="fh_panCard">
                                        </div>
                                    </td>
                                </tr>


                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="fh_uidAadhaarProof">D - UID (Aadhaar)</label>
                                            <input type="text" id="fh_uidAadhaarProof" name="fh_uidAadhaarProof">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="fh_drivingLicense">E - Driving License</label>
                                            <input type="text" id="fh_drivingLicense" name="fh_drivingLicense">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td colspan="2">
                                        <div class="form-group">
                                            <label for="fh_drivingLicenseExpiryDate">Driving License Expiry Date</label>
                                            <input type="date" id="fh_drivingLicenseExpiryDate"
                                                name="fh_drivingLicenseExpiryDate">
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                    <!-- PROOF OF ADDRESS - First/Sole Holder -->
                    <div class="section-group">
                        <div class="section-title">PROOF OF ADDRESS - First/Sole Holder</div>
                        <table class="form-table">
                            <tbody>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="fh_addressType">Address Type</label>
                                            <select id="fh_addressType" name="fh_addressType">
                                                <option value="-None-">-None-</option>
                                                <option value="Residential / Business">Residential / Business</option>
                                                <option value="Residential">Residential</option>
                                                <option value="Business">Business</option>
                                                <option value="Registered Office">Registered Office</option>
                                            </select>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="fh_proofOfAddress">Proof of Address</label>
                                            <select id="fh_proofOfAddress" name="fh_proofOfAddress">
                                                <option value="-None-">-None-</option>
                                                <option value="Passport">Passport</option>
                                                <option value="Driving Licence">Driving Licence</option>
                                                <option value="UID (Aadhaar)">UID (Aadhaar)</option>
                                                <option value="Voter ID Card">Voter ID Card</option>
                                            </select>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td colspan="2">
                                        <div class="form-group">
                                            <label for="fh_addressCorrespondence">Address for Correspondence/Local
                                                Address</label>
                                            <input type="text" id="fh_addressCorrespondence"
                                                name="fh_addressCorrespondence">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="fh_cityTownVillage">City/Town/Village</label>
                                            <input type="text" id="fh_cityTownVillage" name="fh_cityTownVillage">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="fh_pincode">Pincode</label>
                                            <input type="text" id="fh_pincode" name="fh_pincode" pattern="[0-9]{6}">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="fh_state">State</label>
                                            <input type="text" id="fh_state" name="fh_state">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="fh_country">Country</label>
                                            <input type="text" id="fh_country" name="fh_country">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="fh_telephone">Telephone</label>
                                            <input type="tel" id="fh_telephone" name="fh_telephone">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="fh_mobile">Mobile</label>
                                            <input type="tel" id="fh_mobile" name="fh_mobile" pattern="[0-9]{10}">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td colspan="2">
                                        <div class="form-group">
                                            <label for="fh_emailIdAD">Email ID</label>
                                            <input type="email" id="fh_emailIdAD" name="fh_emailIdAD">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td colspan="2">
                                        <div class="form-group checkbox-group">
                                            <input type="checkbox" id="fh_permanentAddress" name="fh_permanentAddress"
                                                value="Same as Correspondence Address">
                                            <label for="fh_permanentAddress">Permanent Address Same as Correspondence
                                                Address</label>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="fh_cityTownVillagePA">City/Town/Village (PA)</label>
                                            <input type="text" id="fh_cityTownVillagePA" name="fh_cityTownVillagePA">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="fh_pincodePA">Pincode (PA)</label>
                                            <input type="text" id="fh_pincodePA" name="fh_pincodePA" pattern="[0-9]{6}">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="fh_statePA">State (PA)</label>
                                            <input type="text" id="fh_statePA" name="fh_statePA">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="fh_countryPA">Country (PA)</label>
                                            <input type="text" id="fh_countryPA" name="fh_countryPA">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="fh_telephonePA">Telephone (PA)</label>
                                            <input type="tel" id="fh_telephonePA" name="fh_telephonePA">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="fh_mobilePA">Mobile (PA)</label>
                                            <input type="tel" id="fh_mobilePA" name="fh_mobilePA" pattern="[0-9]{10}">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td colspan="2">
                                        <div class="form-group">
                                            <label for="fh_proofOfAddressPermanent">Specify proof of address submitted
                                                for Permanent Address</label>
                                            <input type="text" id="fh_proofOfAddressPermanent"
                                                name="fh_proofOfAddressPermanent">
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                    <!-- Tax Residency in Jurisdiction(s) Outside India - F -->
                    <div class="section-group">
                        <div class="section-title">Tax Residency in Jurisdiction(s) Outside India - First/Sole Holder
                        </div>
                        <table class="form-table">
                            <tbody>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="taxResidencyInJurisdictionOutsideIndia">Tick as
                                                Applicable</label>
                                            <select id="taxResidencyInJurisdictionOutsideIndia"
                                                name="taxResidencyInJurisdictionOutsideIndia">
                                                <option value="-None-">-None-</option>
                                                <option value="Yes">Yes</option>
                                                <option value="No">No</option>
                                            </select>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="countryOfBirth" class="required-field">Country of Birth</label>
                                            <input type="text" id="countryOfBirth" name="countryOfBirth" required>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="taxIdentificationNumberOrEquivalent" class="required-field">Tax
                                                Identification Number
                                                or Equivalent</label>
                                            <input type="text" id="taxIdentificationNumberOrEquivalent"
                                                name="taxIdentificationNumberOrEquivalent" required>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="placeCityOfBirth" class="required-field">Place / City of
                                                Birth</label>
                                            <input type="text" id="placeCityOfBirth" name="placeCityOfBirth" required>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td colspan="2">
                                        <div class="form-group">
                                            <label for="countryOfJurisdictionOfResidence" class="required-field">Country
                                                of Jurisdiction of
                                                Residence</label>
                                            <input type="text" id="countryOfJurisdictionOfResidence"
                                                name="countryOfJurisdictionOfResidence" required>
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                    <!-- BANK ACCOUNT DETAILS - First/Sole Holder -->
                    <div class="section-group">
                        <div class="section-title">BANK ACCOUNT DETAILS - First/Sole Holder</div>
                        <table class="form-table">
                            <tbody>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="bankName" class="required-field">Bank Name</label>
                                            <input type="text" id="bankName" name="bankName" required>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="ifscCode">IFSC Code</label>
                                            <input type="text" id="ifscCode" name="ifscCode">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="accountNo">Account No.</label>
                                            <input type="text" id="accountNo" name="accountNo">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="branch">Branch</label>
                                            <input type="text" id="branch" name="branch">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td colspan="2">
                                        <div class="form-group">
                                            <label for="accountType">Account Type</label>
                                            <select id="accountType" name="accountType">
                                                <option value="-None-">-None-</option>
                                                <option value="Saving">Saving</option>
                                                <option value="Current">Current</option>
                                            </select>
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                    <!-- DEPOSITORY ACCOUNT DETAILS - First/Sole Holder -->
                    <div class="section-group">
                        <div class="section-title">DEPOSITORY ACCOUNT DETAILS - First/Sole Holder</div>
                        <table class="form-table">
                            <tbody>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="nameOfTheDPDepositoryParticipant">Name of the DP (Depository
                                                Participant)</label>
                                            <input type="text" id="nameOfTheDPDepositoryParticipant"
                                                name="nameOfTheDPDepositoryParticipant">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="clientID">Status is Other (Client ID)</label>
                                            <input type="text" id="clientID" name="clientID">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td colspan="2">
                                        <div class="form-group">
                                            <label for="dpID">Any other information (DP ID)</label>
                                            <input type="text" id="dpID" name="dpID">
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                    <!-- CONTACT PERSONS DETAILS - First /Sole Holder -->
                    <div class="section-group">
                        <div class="section-title">CONTACT PERSONS DETAILS - First /Sole Holder</div>
                        <table class="form-table">
                            <tbody>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="name1">Name</label>
                                            <input type="text" id="name1" name="name1">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="mobileNo1">Mobile No</label>
                                            <input type="tel" id="mobileNo1" name="mobileNo1" pattern="[0-9]{10}">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td colspan="2">
                                        <div class="form-group">
                                            <label for="emailIdForCorrespondence">Email ID for Receiving All
                                                Correspondence</label>
                                            <input type="email" id="emailIdForCorrespondence"
                                                name="emailIdForCorrespondence">
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                </div>

                <!-- Step 2: Second Holder -->
                <div class="form-step" data-step="2" style="display: none;">
                    <h2 class="step-title">Second Holder Details</h2>

                    <div class="alert alert-info">
                        <strong>Note:</strong> Fill this section only if you have a second holder for the account.
                    </div>

                    <!-- Identity Details - Second Holder -->
                    <div class="section-group">
                        <div class="section-title">Identity Details - Second Holder</div>
                        <table class="form-table">
                            <tbody>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="sh_nameOfApplicant" class="required-field">Name of
                                                Applicant</label>
                                            <input type="text" id="sh_nameOfApplicant" name="sh_nameOfApplicant"
                                                required>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="sh_fatherSpouseName" class="required-field">Father's/Spouse's
                                                Name</label>
                                            <input type="text" id="sh_fatherSpouseName" name="sh_fatherSpouseName"
                                                required>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="sh_motherName" class="required-field">Mother's Name</label>
                                            <input type="text" id="sh_motherName" name="sh_motherName" required>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="sh_relationshipWithMinor" class="required-field">Relationship
                                                with Minor</label>
                                            <input type="text" id="sh_relationshipWithMinor"
                                                name="sh_relationshipWithMinor" required>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="sh_dateOfBirth" class="required-field">Date of Birth</label>
                                            <input type="date" id="sh_dateOfBirth" name="sh_dateOfBirth" required>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="sh_maritalStatus" class="required-field">Marital Status</label>
                                            <select id="sh_maritalStatus" name="sh_maritalStatus" required>
                                                <option value="-None-">-None-</option>
                                                <option value="Single">Single</option>
                                                <option value="Married">Married</option>
                                                <option value="Others">Others</option>
                                            </select>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="sh_gender" class="required-field">Gender</label>
                                            <select id="sh_gender" name="sh_gender" required>
                                                <option value="-None-">-None-</option>
                                                <option value="Male">Male</option>
                                                <option value="Female">Female</option>
                                                <option value="Other">Other</option>
                                            </select>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="sh_citizenship" class="required-field">Citizenship</label>
                                            <select id="sh_citizenship" name="sh_citizenship" required>
                                                <option value="-None-">-None-</option>
                                                <option value="Indian">Indian</option>
                                                <option value="NRI">NRI</option>
                                                <option value="PIO">PIO</option>
                                                <option value="Foreign">Foreign</option>
                                            </select>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="sh_pan" class="required-field">PAN</label>
                                            <input type="text" id="sh_pan" name="sh_pan"
                                                pattern="[A-Z]{5}[0-9]{4}[A-Z]{1}" required>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="sh_gstNo">GST No.</label>
                                            <input type="text" id="sh_gstNo" name="sh_gstNo">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="sh_uidAadhaar" class="required-field">UID / Aadhaar No.</label>
                                            <input type="text" id="sh_uidAadhaar" name="sh_uidAadhaar"
                                                pattern="[0-9]{12}" required>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="sh_ckycNo">CKYC No</label>
                                            <input type="text" id="sh_ckycNo" name="sh_ckycNo">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="sh_tan">TAN</label>
                                            <input type="text" id="sh_tan" name="sh_tan">
                                        </div>
                                    </td>
                                    <td>
                                        <!-- <div class="form-group">
                                                <label for="sh_accountType">Account Type</label>
                                                <select id="sh_accountType" name="sh_accountType">
                                                    <option value="-None-">-None-</option>
                                                    <option value="Saving">Saving</option>
                                                    <option value="Current">Current</option>
                                                </select>
                                            </div> -->
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="sh_residentialStatus" class="required-field">Residential
                                                Status</label>
                                            <select id="sh_residentialStatus" name="sh_residentialStatus" required>
                                                <option value="-None-">-None-</option>
                                                <option value="Resident Individual">Resident Individual</option>
                                                <option value="Non-Resident Individual">Non-Resident Individual
                                                </option>
                                                <option value="Foreign National">Foreign National</option>
                                                <option value="Person of Indian Origin">Person of Indian Origin
                                                </option>
                                            </select>
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                    <!-- INCOME DETAILS - Second Holder -->
                    <div class="section-group">
                        <div class="section-title">INCOME DETAILS - Second Holder</div>
                        <table class="form-table">
                            <tbody>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="Net_worth_Not_older_than_1_year1">Net worth (Not older than 1
                                                year)</label>
                                            <input type="number" id="Net_worth_Not_older_than_1_year1"
                                                name="Net_worth_Not_older_than_1_year1" step="0.01" min="0">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="As_on_Date1">As on Date</label>
                                            <input type="date" id="As_on_Date1" name="As_on_Date1">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="Income_Range_per_annum1">Income Range (per annum)</label>
                                            <select id="Income_Range_per_annum1" name="Income_Range_per_annum1">
                                                <option value="-None-">-None-</option>
                                                <option value="Below Rs.1 Lakh">Below Rs.1 Lakh</option>
                                                <option value="Rs.1-5 Lakhs">Rs.1-5 Lakhs</option>
                                                <option value="Rs.5-10 Lakhs">Rs.5-10 Lakhs</option>
                                                <option value="Rs.10-25 Lakhs">Rs.10-25 Lakhs</option>
                                                <option value=">25 Lakhs">>25 Lakhs</option>
                                                <!-- <option value="Rs.50 Lakhs - 1 Crore">Rs.50 Lakhs - 1 Crore</option>
                                                    <option value="Above Rs.1 Crore">Above Rs.1 Crore</option> -->
                                            </select>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="Occupation1">Occupation</label>
                                            <select id="Occupation1" name="Occupation1">
                                                <option value="-None-">-None-</option>
                                                <option value="Private Sector">Private Sector</option>
                                                <option value="Public Sector">Public Sector</option>
                                                <option value="Govt. Services">Govt. Services</option>
                                                <option value="Business">Business</option>
                                                <option value="Professional">Professional</option>
                                                <option value="Housewife">Housewife</option>
                                                <option value="Retired">Retired</option>
                                                <option value="Housewife">Housewife</option>
                                                <option value="Student">Student</option>
                                                <option value="Others">Others</option>
                                            </select>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="Please_select_Status1">Please select Status</label>
                                            <select id="Please_select_Status1" name="Please_select_Status1">
                                                <option value="-None-">-None-</option>
                                                <option value="Politically Exposed Person (PEP)">Politically Exposed
                                                    Person (PEP)
                                                </option>
                                                <option value="Related to Politically Exposed Person (RPEP)">Related
                                                    to Politically
                                                    Exposed Person (RPEP)</option>
                                                <option value="Not Applicable">Not Applicable</option>
                                            </select>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="Sources_of_Funds1">Sources of Funds</label>
                                            <select id="Sources_of_Funds1" name="Sources_of_Funds1">
                                                <option value="-None-">-None-</option>
                                                <option value="Own & Family">Own & Family</option>
                                                <option value="Borrowed">Borrowed</option>
                                            </select>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="SH_Nature_of_Business_Profession">Nature of Business
                                                Profession</label>
                                            <input type="text" id="SH_Nature_of_Business_Profession"
                                                name="SH_Nature_of_Business_Profession"
                                                placeholder="Enter nature of business or profession">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="Overall_Investment_Goals1">Overall Investment Goals</label>
                                            <select id="Overall_Investment_Goals1" name="Overall_Investment_Goals1">
                                                <option value="-None-">-None-</option>
                                                <option value="Capital Appreciation & Regular Income">Capital
                                                    Appreciation & Regular Income</option>
                                                <option value="Regular Income">Regular Income</option>
                                            </select>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="SH_Type_of_Company_Firm">Type of Company/Firm</label>
                                            <select id="SH_Type_of_Company_Firm" name="SH_Type_of_Company_Firm">
                                                <option value="-None-">-None-</option>
                                                <option value="Sole Proprietorship">Sole Proprietorship</option>
                                                <option value="Partnership">Partnership</option>
                                                <option value="Limited Liability Partnership (LLP)">Limited
                                                    Liability Partnership
                                                    (LLP)</option>
                                                <option value="Private Limited Company">Private Limited Company
                                                </option>
                                                <option value="Public Limited Company">Public Limited Company
                                                </option>
                                                <option value="One Person Company (OPC)">One Person Company (OPC)
                                                </option>
                                                <option value="Trust">Trust</option>
                                                <option value="Society">Society</option>
                                                <option value="Co-operative Society">Co-operative Society</option>
                                                <option value="Not Applicable">Not Applicable</option>
                                                <option value="Others">Others</option>
                                            </select>
                                        </div>
                                    </td>
                                    <td>
                                        <!-- <div class="form-group">
                                                <label for="fh_pleaseSelectStatus2">Please select Status</label>
                                                <select id="fh_pleaseSelectStatus2" name="fh_pleaseSelectStatus2">
                                                    <option value="-None-">-None-</option>
                                                    <option value="Politically Exposed Person (PEP)">Politically Exposed
                                                        Person (PEP)
                                                    </option>
                                                    <option value="Related to Politically Exposed Person (RPEP)">Related
                                                        to
                                                        Politically
                                                        Exposed Person (RPEP)</option>
                                                    <option value="Not Applicable">Not Applicable</option>
                                                </select>
                                            </div> -->
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                    <!-- Contact Details - Second Holder -->
                    <div class="section-group">
                        <div class="section-title">Contact Details - Second Holder</div>
                        <table class="form-table">
                            <tbody>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="sh_mobileNo" class="required-field">Mobile No.</label>
                                            <input type="tel" id="sh_mobileNo" name="sh_mobileNo" pattern="[0-9]{10}"
                                                required>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="sh_landlineNo">Landline No.</label>
                                            <input type="tel" id="sh_landlineNo" name="sh_landlineNo">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td colspan="2">
                                        <div class="form-group">
                                            <label for="sh_emailId">Email ID</label>
                                            <input type="email" id="sh_emailId" name="sh_emailId">
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                    <!-- Proof of Identity - Second Holder -->
                    <div class="section-group">
                        <div class="section-title">PROOF OF IDENTITY - Second Holder</div>
                        <table class="form-table">
                            <tbody>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="Passport_Number1" class="required-field">A - Passport
                                                Number</label>
                                            <input type="text" id="Passport_Number1" name="Passport_Number1" required>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="Passport_Expiry_Date1">Passport Expiry Date</label>
                                            <input type="date" id="Passport_Expiry_Date1" name="Passport_Expiry_Date1">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="PAN_Card1">C - PAN Card</label>
                                            <input type="text" id="PAN_Card1" name="PAN_Card1">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="Voter_ID1">B - Voter ID</label>
                                            <input type="text" id="Voter_ID1" name="Voter_ID1">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="UID_Aadhaar1">D - UID (Aadhaar)</label>
                                            <input type="text" id="UID_Aadhaar1" name="UID_Aadhaar1"
                                                pattern="[0-9]{12}">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="Driving_License1">E - Driving License</label>
                                            <input type="text" id="Driving_License1" name="Driving_License1">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td colspan="2">
                                        <div class="form-group">
                                            <label for="Driving_License_Expiry_Date1">Driving License Expiry
                                                Date</label>
                                            <input type="date" id="Driving_License_Expiry_Date1"
                                                name="Driving_License_Expiry_Date1">
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                    <!-- Proof / Address - Second Holder -->
                    <div class="section-group">
                        <div class="section-title">PROOF OF ADDRESS - Second Holder</div>
                        <table class="form-table">
                            <tbody>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="sh_addressType">Address Type</label>
                                            <select id="sh_addressType" name="sh_addressType">
                                                <option value="-None-">-None-</option>
                                                <option value="Residential / Business">Residential / Business</option>
                                                <option value="Residential">Residential</option>
                                                <option value="Business">Business</option>
                                                <option value="Registered Office">Registered Office</option>
                                            </select>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="sh_proofOfAddress">Proof of Address</label>
                                            <select id="sh_proofOfAddress" name="sh_proofOfAddress">
                                                <option value="-None-">-None-</option>
                                                <option value="Passport">Passport</option>
                                                <option value="Driving Licence">Driving Licence</option>
                                                <option value="UID (Aadhaar)">UID (Aadhaar)</option>
                                                <option value="Voter ID Card">Voter ID Card</option>
                                            </select>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td colspan="2">
                                        <div class="form-group">
                                            <label for="sh_addressCorrespondence">Address for Correspondence/Local
                                                Address</label>
                                            <input type="text" id="sh_addressCorrespondence"
                                                name="sh_addressCorrespondence">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="sh_cityTownVillage">City/Town/Village</label>
                                            <input type="text" id="sh_cityTownVillage" name="sh_cityTownVillage">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="sh_pincode">Pincode</label>
                                            <input type="text" id="sh_pincode" name="sh_pincode" pattern="[0-9]{6}">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="sh_state">State</label>
                                            <input type="text" id="sh_state" name="sh_state">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="sh_country">Country</label>
                                            <input type="text" id="sh_country" name="sh_country">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="sh_telephone">Telephone</label>
                                            <input type="tel" id="sh_telephone" name="sh_telephone">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="sh_mobile">Mobile</label>
                                            <input type="tel" id="sh_mobile" name="sh_mobile" pattern="[0-9]{10}">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td colspan="2">
                                        <div class="form-group">
                                            <label for="sh_emailIdAD">Email ID</label>
                                            <input type="email" id="sh_emailIdAD" name="sh_emailIdAD">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td colspan="2">
                                        <div class="form-group checkbox-group">
                                            <input type="checkbox" id="sh_permanentAddress" name="sh_permanentAddress"
                                                value="Same as Correspondence Address">
                                            <label for="sh_permanentAddress">Permanent Address Same as Correspondence
                                                Address</label>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="sh_cityTownVillagePA">City/Town/Village (PA)</label>
                                            <input type="text" id="sh_cityTownVillagePA" name="sh_cityTownVillagePA">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="sh_pincodePA">Pincode (PA)</label>
                                            <input type="text" id="sh_pincodePA" name="sh_pincodePA" pattern="[0-9]{6}">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="sh_statePA">State (PA)</label>
                                            <input type="text" id="sh_statePA" name="sh_statePA">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="sh_countryPA">Country (PA)</label>
                                            <input type="text" id="sh_countryPA" name="sh_countryPA">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="sh_telephonePA">Telephone (PA)</label>
                                            <input type="tel" id="sh_telephonePA" name="sh_telephonePA">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="sh_mobilePA">Mobile (PA)</label>
                                            <input type="tel" id="sh_mobilePA" name="sh_mobilePA" pattern="[0-9]{10}">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td colspan="2">
                                        <div class="form-group">
                                            <label for="sh_proofOfAddressPermanent">Specify proof of address submitted
                                                for Permanent Address</label>
                                            <input type="text" id="sh_proofOfAddressPermanent"
                                                name="sh_proofOfAddressPermanent">
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                    <!-- Tax Residency in Jurisdiction(s) Outside India - S -->
                    <div class="section-group">
                        <div class="section-title">Tax Residency in Jurisdiction(s) Outside India - S</div>
                        <table class="form-table">
                            <tbody>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="Tax_Residency_in_Jurisdiction_s_Outside_India1">Tick as
                                                Applicable</label>
                                            <select id="Tax_Residency_in_Jurisdiction_s_Outside_India1"
                                                name="Tax_Residency_in_Jurisdiction_s_Outside_India1">
                                                <option value="-None-">-None-</option>
                                                <option value="Yes">Yes</option>
                                                <option value="No">No</option>
                                            </select>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="Country_of_Birth1" class="required-field">Country of
                                                Birth</label>
                                            <input type="text" id="Country_of_Birth1" name="Country_of_Birth1" required>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="Tax_Identification_Number_or_Equivalent1"
                                                class="required-field">Tax Identification
                                                Number or Equivalent</label>
                                            <input type="text" id="Tax_Identification_Number_or_Equivalent1"
                                                name="Tax_Identification_Number_or_Equivalent1" required>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="Place_City_of_Birth1" class="required-field">Place / City of
                                                Birth</label>
                                            <input type="text" id="Place_City_of_Birth1" name="Place_City_of_Birth1"
                                                required>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td colspan="2">
                                        <div class="form-group">
                                            <label for="Country_of_Jurisdiction_of_Residence1"
                                                class="required-field">Country of Jurisdiction
                                                of Residence</label>
                                            <input type="text" id="Country_of_Jurisdiction_of_Residence1"
                                                name="Country_of_Jurisdiction_of_Residence1" required>
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                    <!-- Onboarding Status Section - Second Holder -->
                    <div class="section-group">
                        <div class="section-title">Onboarding Status - Second Holder</div>
                        <table class="form-table">
                            <tbody>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="onboardingStatus">Onboarding Status</label>
                                            <select id="onboardingStatus" name="onboardingStatus">
                                                <option value="-None- ">-None-</option>
                                                <option value="None">None</option>
                                                <option value="Detailed Documentation">Detailed Documentation
                                                </option>
                                                <option value="KYC Verifying">KYC Verifying</option>
                                                <option value="AML Verifyingg">AML Verifyingg</option>
                                                <option value="Custody Verifying">Custody Verifying</option>
                                                <option value="Checker Verifyingg">Checker Verifyingg</option>
                                                <option value="Penny Pay Verifyingg">Penny Pay Verifyingg</option>
                                                <option value="Demat Verifyingg">Demat Verifyingg</option>
                                                <option value="Account Activated">Account Activated</option>
                                                <option value="Document Scannedd">Document Scannedd</option>
                                                <option value="Welcome Kit Sharedd">Welcome Kit Sharedd</option>
                                                <option value="Onbaording Completed">Onbaording Completed</option>
                                            </select>
                                        </div>
                                    </td>
                                    <td>
                                        <!-- <div class="form-group">
                                                <label for="opportunity">Opportunity</label>
                                                <input type="text" id="opportunity" name="opportunity">
                                            </div> -->
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                </div>

                <!-- Step 3: Third Holder -->
                <div class="form-step" data-step="3" style="display: none;">
                    <h2 class="step-title">Third Holder Details</h2>

                    <div class="alert alert-info">
                        <strong>Note:</strong> Fill this section only if you have a third holder for the account.
                    </div>

                    <!-- Identity Details - Third Holder -->
                    <div class="section-group">
                        <div class="section-title">Identity Details - Third Holder</div>
                        <table class="form-table">
                            <tbody>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="th_nameOfApplicant" class="required-field">Name of
                                                Applicant</label>
                                            <input type="text" id="th_nameOfApplicant" name="th_nameOfApplicant"
                                                required>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="th_fatherSpouseName" class="required-field">Father's/Spouse's
                                                name</label>
                                            <input type="text" id="th_fatherSpouseName" name="th_fatherSpouseName"
                                                required>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="th_motherName" class="required-field">Mother's Name</label>
                                            <input type="text" id="th_motherName" name="th_motherName" required>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="th_tan">TAN</label>
                                            <input type="text" id="th_tan" name="th_tan">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="th_dateOfBirth" class="required-field">Date of Birth</label>
                                            <input type="date" id="th_dateOfBirth" name="th_dateOfBirth" required>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="th_maritalStatus" class="required-field">Marital Status</label>
                                            <select id="th_maritalStatus" name="th_maritalStatus" required>
                                                <option value="-None-">-None-</option>
                                                <option value="Single">Single</option>
                                                <option value="Married">Married</option>
                                                <option value="Others">Others</option>
                                            </select>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="th_gender" class="required-field">Gender</label>
                                            <select id="th_gender" name="th_gender" required>
                                                <option value="-None-">-None-</option>
                                                <option value="Male">Male</option>
                                                <option value="Female">Female</option>
                                                <option value="Transgender">Transgender</option>
                                            </select>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="th_citizenship" class="required-field">Citizenship</label>
                                            <input type="text" id="th_citizenship" name="th_citizenship" required>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="th_pan" class="required-field">PAN</label>
                                            <input type="text" id="th_pan" name="th_pan"
                                                pattern="[A-Z]{5}[0-9]{4}[A-Z]{1}" required>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="th_gstNo">GST No.</label>
                                            <input type="text" id="th_gstNo" name="th_gstNo">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="th_uidAadhaar" class="required-field">UID / Aadhaar No.</label>
                                            <input type="text" id="th_uidAadhaar" name="th_uidAadhaar"
                                                pattern="[0-9]{12}" required>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="th_ckycNo">CKYC No</label>
                                            <input type="text" id="th_ckycNo" name="th_ckycNo">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td colspan="2">
                                        <div class="form-group">
                                            <label for="th_residentialStatus" class="required-field">Residential
                                                Status</label>
                                            <select id="th_residentialStatus" name="th_residentialStatus" required>
                                                <option value="-None-">-None-</option>
                                                <option value="Resident Individual">Resident Individual</option>
                                                <option value="Non-Resident Individual">Non-Resident Individual
                                                </option>
                                                <option value="Foreign National">Foreign National</option>
                                                <option value="Person of Indian Origin">Person of Indian Origin
                                                </option>
                                            </select>
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                    <!-- Income Details - Third Holder -->
                    <div class="section-group">
                        <div class="section-title">Income Details - Third Holder</div>
                        <table class="form-table">
                            <tbody>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="Net_worth_Not_older_than_1_year2">Net worth (Not older than 1
                                                year)</label>
                                            <input type="number" id="Net_worth_Not_older_than_1_year2"
                                                name="Net_worth_Not_older_than_1_year2" step="0.01">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="As_on_Date2">As on Date</label>
                                            <input type="date" id="As_on_Date2" name="As_on_Date2">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="Income_Range_per_annum2">Income Range (per annum)</label>
                                            <select id="Income_Range_per_annum2" name="Income_Range_per_annum2">
                                                <option value="-None-">-None-</option>
                                                <option value="Below Rs.1 Lakh">Below Rs.1 Lakh</option>
                                                <option value="Rs.1-5 Lakhs">Rs.1-5 Lakhs</option>
                                                <option value="Rs.5-10 Lakhs">Rs.5-10 Lakhs</option>
                                                <option value="Rs.10-25 Lakhs">Rs.10-25 Lakhs</option>
                                                <option value=">25 Lakhs">>25 Lakhs</option>
                                                <!-- <option value="Rs.50 Lakhs - 1 Crore">Rs.50 Lakhs - 1 Crore</option>
                                                    <option value="Above Rs.1 Crore">Above Rs.1 Crore</option> -->
                                            </select>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="TH_Occupation">Occupation</label>
                                            <select id="TH_Occupation" name="TH_Occupation">
                                                <option value="-None-">-None-</option>
                                                <option value="Private Sector">Private Sector</option>
                                                <option value="Public Sector">Public Sector</option>
                                                <option value="Govt. Services">Govt. Services</option>
                                                <option value="Business">Business</option>
                                                <option value="Professional">Professional</option>
                                                <option value="Housewife">Housewife</option>
                                                <option value="Retired">Retired</option>
                                                <option value="Student">Student</option>
                                                <option value="Others">Others</option>
                                            </select>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="TH_Please_select_Status">Please select Status</label>
                                            <select id="TH_Please_select_Status" name="TH_Please_select_Status">
                                                <option value="-None-">-None-</option>
                                                <option value="Politically Exposed Person (PEP)">Politically Exposed
                                                    Person (PEP)</option>
                                                <option value="Related to Politically Exposed Person (RPEP)">Related
                                                    to Politically Exposed
                                                    Person (RPEP)</option>
                                                <option value="Not Applicable">Not Applicable</option>
                                            </select>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="TH_Sources_of_Funds">Sources of Funds</label>
                                            <select id="TH_Sources_of_Funds" name="TH_Sources_of_Funds">
                                                <option value="-None-">-None-</option>
                                                <option value="Own & Family">Own & Family</option>
                                                <option value="Borrowed">Borrowed</option>
                                            </select>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="TH_Nature_of_Busniess_Profession">Nature of
                                                Business/Profession</label>
                                            <input type="text" id="TH_Nature_of_Busniess_Profession"
                                                name="TH_Nature_of_Busniess_Profession"
                                                placeholder="Enter nature of business or profession">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="TH_Overall_Investment_Goals">Overall Investment Goals</label>
                                            <select id="TH_Overall_Investment_Goals" name="TH_Overall_Investment_Goals">
                                                <option value="-None-">-None-</option>
                                                <option value="Capital Appreciation & Regular Income">Capital
                                                    Appreciation & Regular Income</option>
                                                <option value="Regular Income">Regular Income</option>
                                            </select>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td colspan="2">
                                        <div class="form-group">
                                            <label for="TH_Type_of_Company_Firm">Type of Company/Firm</label>
                                            <select id="TH_Type_of_Company_Firm" name="TH_Type_of_Company_Firm">
                                                <option value="-None-">-None-</option>
                                                <option value="Sole Proprietorship">Sole Proprietorship</option>
                                                <option value="Partnership">Partnership</option>
                                                <option value="Limited Liability Partnership (LLP)">Limited Liability
                                                    Partnership (LLP)</option>
                                                <option value="Private Limited Company">Private Limited Company
                                                </option>
                                                <option value="Public Limited Company">Public Limited Company
                                                </option>
                                                <option value="One Person Company (OPC)">One Person Company (OPC)
                                                </option>
                                                <option value="Trust">Trust</option>
                                                <option value="Society">Society</option>
                                                <option value="Co-operative Society">Co-operative Society</option>
                                                <option value="Not Applicable">Not Applicable</option>
                                                <option value="Others">Others</option>
                                            </select>
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    <!-- Contact Details - Third Holder -->
                    <div class="section-group">
                        <div class="section-title">Contact Details - Third Holder</div>
                        <table class="form-table">
                            <tbody>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="th_mobileNo" class="required-field">Mobile No.</label>
                                            <input type="tel" id="th_mobileNo" name="th_mobileNo" pattern="[0-9]{10}"
                                                required>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="th_landlineNo">Landline No.</label>
                                            <input type="tel" id="th_landlineNo" name="th_landlineNo">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td colspan="2">
                                        <div class="form-group">
                                            <label for="th_emailId">Email ID</label>
                                            <input type="email" id="th_emailId" name="th_emailId">
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                    <!-- Proof of Identity - Third Holder -->
                    <div class="section-group">
                        <div class="section-title">PROOF OF IDENTITY - Third Holder</div>
                        <table class="form-table">
                            <tbody>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="TH_A_Passport_Number" class="required-field">A - Passport
                                                Number</label>
                                            <input type="text" id="TH_A_Passport_Number" name="TH_A_Passport_Number"
                                                required>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="TH_B_Voter_ID">B - Voter ID</label>
                                            <input type="text" id="TH_B_Voter_ID" name="TH_B_Voter_ID">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="TH_UID_Aadhaar">UID (Aadhaar)</label>
                                            <input type="text" id="TH_UID_Aadhaar" name="TH_UID_Aadhaar"
                                                pattern="[0-9]{12}">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="TH_Driving_License">Driving License</label>
                                            <input type="text" id="TH_Driving_License" name="TH_Driving_License">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="TH_Driving_License_Expiry_Date">Driving License Expiry
                                                Date</label>
                                            <input type="date" id="TH_Driving_License_Expiry_Date"
                                                name="TH_Driving_License_Expiry_Date">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="TH_Passport_Expiry_Date">Passport Expiry Date</label>
                                            <input type="date" id="TH_Passport_Expiry_Date"
                                                name="TH_Passport_Expiry_Date">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td colspan="2">
                                        <div class="form-group">
                                            <label for="TH_PAN_Card">PAN Card</label>
                                            <input type="text" id="TH_PAN_Card" name="TH_PAN_Card">
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                    <!-- PROOF OF ADDRESS - Third Holder -->
                    <div class="section-group">
                        <div class="section-title">PROOF OF ADDRESS - Third Holder</div>
                        <table class="form-table">
                            <tbody>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="th_addressType">Address Type</label>
                                            <select id="th_addressType" name="th_addressType">
                                                <option value="-None-">-None-</option>
                                                <option value="Residential / Business">Residential / Business</option>
                                                <option value="Residential">Residential</option>
                                                <option value="Business">Business</option>
                                                <option value="Registered Office">Registered Office</option>
                                            </select>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="th_proofOfAddress">Proof of Address</label>
                                            <select id="th_proofOfAddress" name="th_proofOfAddress">
                                                <option value="-None-">-None-</option>
                                                <option value="Passport">Passport</option>
                                                <option value="Driving Licence">Driving Licence</option>
                                                <option value="UID (Aadhaar)">UID (Aadhaar)</option>
                                                <option value="Voter ID Card">Voter ID Card</option>
                                            </select>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td colspan="2">
                                        <div class="form-group">
                                            <label for="th_addressCorrespondence">Address for Correspondence/Local
                                                Address</label>
                                            <input type="text" id="th_addressCorrespondence"
                                                name="th_addressCorrespondence">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="th_cityTownVillage">City/Town/Village</label>
                                            <input type="text" id="th_cityTownVillage" name="th_cityTownVillage">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="th_pincode">Pincode</label>
                                            <input type="text" id="th_pincode" name="th_pincode" pattern="[0-9]{6}">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="th_state">State</label>
                                            <input type="text" id="th_state" name="th_state">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="th_country">Country</label>
                                            <input type="text" id="th_country" name="th_country">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="th_telephone">Telephone</label>
                                            <input type="tel" id="th_telephone" name="th_telephone">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="th_mobile">Mobile</label>
                                            <input type="tel" id="th_mobile" name="th_mobile" pattern="[0-9]{10}">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td colspan="2">
                                        <div class="form-group">
                                            <label for="th_emailIdAD">Email ID</label>
                                            <input type="email" id="th_emailIdAD" name="th_emailIdAD">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td colspan="2">
                                        <div class="form-group checkbox-group">
                                            <input type="checkbox" id="th_permanentAddress" name="th_permanentAddress"
                                                value="Same as Correspondence Address">
                                            <label for="th_permanentAddress">Permanent Address Same as Correspondence
                                                Address</label>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="th_cityTownVillagePA">City/Town/Village (PA)</label>
                                            <input type="text" id="th_cityTownVillagePA" name="th_cityTownVillagePA">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="th_pincodePA">Pincode (PA)</label>
                                            <input type="text" id="th_pincodePA" name="th_pincodePA" pattern="[0-9]{6}">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="th_statePA">State (PA)</label>
                                            <input type="text" id="th_statePA" name="th_statePA">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="th_countryPA">Country (PA)</label>
                                            <input type="text" id="th_countryPA" name="th_countryPA">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="th_telephonePA">Telephone (PA)</label>
                                            <input type="tel" id="th_telephonePA" name="th_telephonePA">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="th_mobilePA">Mobile (PA)</label>
                                            <input type="tel" id="th_mobilePA" name="th_mobilePA" pattern="[0-9]{10}">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td colspan="2">
                                        <div class="form-group">
                                            <label for="th_proofOfAddressPermanent">Specify proof of address submitted
                                                for Permanent Address</label>
                                            <input type="text" id="th_proofOfAddressPermanent"
                                                name="th_proofOfAddressPermanent">
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                    <!-- Tax Residency in Jurisdiction(s) Outside India - T -->
                    <div class="section-group">
                        <div class="section-title">Tax Residency in Jurisdiction(s) Outside India - T</div>
                        <table class="form-table">
                            <tbody>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="TH_Tax_Residency_in_Jurisdiction_s_Outside_India">TH_Tick as
                                                Applicable</label>
                                            <select id="TH_Tax_Residency_in_Jurisdiction_s_Outside_India"
                                                name="TH_Tax_Residency_in_Jurisdiction_s_Outside_India">
                                                <option value="-None-">-None-</option>
                                                <option value="Yes">Yes</option>
                                                <option value="No">No</option>
                                            </select>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="TH_Country_of_Birth" class="required-field">Country of
                                                Birth</label>
                                            <input type="text" id="TH_Country_of_Birth" name="TH_Country_of_Birth"
                                                required>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="TH_Tax_Identification_Number_or_Equivalent"
                                                class="required-field">Tax Identification
                                                Number or Equivalent</label>
                                            <input type="text" id="TH_Tax_Identification_Number_or_Equivalent"
                                                name="TH_Tax_Identification_Number_or_Equivalent" required>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="TH_Place_City_of_Birth" class="required-field">Place / City of
                                                Birth</label>
                                            <input type="text" id="TH_Place_City_of_Birth" name="TH_Place_City_of_Birth"
                                                required>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td colspan="2">
                                        <div class="form-group">
                                            <label for="TH_Country_of_Jurisdiction_of_Residence"
                                                class="required-field">Country of Jurisdiction
                                                of Residence</label>
                                            <input type="text" id="TH_Country_of_Jurisdiction_of_Residence"
                                                name="TH_Country_of_Jurisdiction_of_Residence" required>
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                </div>
                <!-- Step 4: Investment (you'll need to add this) -->
                <div class="form-step" data-step="4" style="display: none;">
                    <h2 class="step-title">Investment Details</h2>
                    <!-- Add your investment form content here -->
                    <!-- Investment Profile and Objectives of the Client -->
                    <div class="section-group">
                        <div class="section-title">INVESTMENT PROFILE AND OBJECTIVES OF THE CLIENT</div>
                        <table class="form-table">
                            <tbody>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="riskTolerance">Risk Tolerance</label>
                                            <select id="riskTolerance" name="riskTolerance">
                                                <option value="-None-">-None-</option>
                                                <option value="Low">Low</option>
                                                <option value="Medium">Medium</option>
                                                <option value="High">High</option>
                                            </select>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="investmentExperience">Investment Experience in Equity
                                                Markets</label>
                                            <select id="investmentExperience" name="investmentExperience">
                                                <option value="-None-">-None-</option>
                                                <option value="<3 years">&lt;3 years</option>
                                                <option value="3-5 years">3-5 years</option>
                                                <option value="5 years">5 years</option>
                                            </select>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="overallInvestmentGoalsForInvestment">Overall Investment Goals
                                                for Investment</label>
                                            <select id="overallInvestmentGoalsForInvestment"
                                                name="overallInvestmentGoalsForInvestment">
                                                <option value="-None-">-None-</option>
                                                <option value="Capital Appreciation & Regular Income">Capital
                                                    Appreciation & Regular Income</option>
                                                <option value="Regular Income">Regular Income</option>
                                            </select>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="preferredAssetClass">Preferred Asset Class</label>
                                            <select id="preferredAssetClass" name="preferredAssetClass">
                                                <option value="-None-">-None-</option>
                                                <option value="Balanced">Balanced</option>
                                                <option value="Equity">Equity</option>
                                                <option value="Debt">Debt</option>
                                                <option value="Mutual Funds">Mutual Funds</option>
                                                <option value="Venture Capital">Venture Capital</option>
                                                <option value="As per Product Opted">As per Product Opted</option>
                                                <option value="Others">Others</option>
                                            </select>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="indicativeTimePeriodOfInvestments">Indicative Time Period of
                                                Investments</label>
                                            <select id="indicativeTimePeriodOfInvestments"
                                                name="indicativeTimePeriodOfInvestments">
                                                <option value="-None-">-None-</option>
                                                <option value="<3 years">&lt;3 years</option>
                                                <option value="3-5 years">3-5 years</option>
                                                <option value="5 years">5 years</option>
                                            </select>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="systematicTransferPlan">Systematic Transfer Plan</label>
                                            <select id="systematicTransferPlan" name="systematicTransferPlan">
                                                <option value="-None-">-None-</option>
                                                <option value="Monthly">Monthly</option>
                                                <option value="Date">Date</option>
                                                <option value="Not Required">Not Required</option>
                                            </select>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="systematicTransferPlanDate">Systematic Transfer Plan
                                                Date</label>
                                            <input type="date" id="systematicTransferPlanDate"
                                                name="systematicTransferPlanDate">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="indicativeTotalInvestmentPortfolioPropose">Indicative % of Total
                                                Investment Portfolio Propose</label>
                                            <input type="number" id="indicativeTotalInvestmentPortfolioPropose"
                                                name="indicativeTotalInvestmentPortfolioPropose" min="0" max="100"
                                                step="0.01">
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                    <!-- Client Introduced by -->
                    <div class="section-group">
                        <div class="section-title">Client Introduced by</div>
                        <table class="form-table">
                            <tbody>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="clientName">Client Name</label>
                                            <input type="text" id="clientName" name="clientName">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="clientAddress">Address</label>
                                            <textarea id="clientAddress" name="clientAddress" rows="3"></textarea>
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                    <!-- Replace the APPLICANT DECLARATION section in both forms with this enhanced version -->

                    <!-- For Individual/NRI Form (onboardingForm) - Step 4 -->
                    <div class="section-group">
                        <div class="section-title">APPLICANT DECLARATION</div>

                        <!-- Photo Upload Instructions -->
                        <div class="photo-instructions">
                            <h4>📷 Photo Upload Requirements:</h4>
                            <ul>
                                <li>Upload clear, passport-size photographs</li>
                                <li>Accepted formats: JPG, PNG, GIF</li>
                                <li>Maximum file size: 2MB per photo</li>
                                <li>Photos should be recent and clearly visible</li>
                            </ul>
                        </div>

                        <!-- First Holder Section -->
                        <div class="holder-section">
                            <div class="holder-section-header">
                                <h4>📸 First Holder Details</h4>
                            </div>

                            <div class="holder-content">
                                <!-- First Holder Photo -->
                                <div class="photo-upload-area">
                                    <div class="photo-box" id="photoBoxFirst">
                                        <div class="photo-box-header">First Holder Photo</div>
                                        <div class="photo-preview" id="previewFirst">
                                            <div class="photo-placeholder">
                                                <i>👤</i>
                                                <div>Click to upload<br>First Holder Photo</div>
                                            </div>
                                            <input type="file" id="photoFirstHolder" name="photoFirstHolder"
                                                class="photo-upload-input" accept="image/*"
                                                onchange="handlePhotoUpload(this, 'First')">
                                        </div>
                                        <button type="button" class="remove-photo-btn" onclick="removePhoto('First')"
                                            title="Remove Photo">×</button>
                                        <div class="photo-info" id="infoFirst">No photo selected</div>
                                    </div>
                                </div>

                                <!-- First Holder Details -->
                                <div class="holder-details">
                                    <table class="form-table">
                                        <tbody>
                                            <tr>
                                                <td>
                                                    <div class="form-group">
                                                        <label for="firstHolderDate">First Holder Date</label>
                                                        <input type="date" id="firstHolderDate" name="firstHolderDate">
                                                    </div>
                                                </td>
                                                <td>
                                                    <div class="form-group">
                                                        <label for="firstHolderPlace">First Holder Place</label>
                                                        <input type="text" id="firstHolderPlace"
                                                            name="firstHolderPlace">
                                                    </div>
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>

                        <!-- Second Holder Section -->
                        <div class="holder-section">
                            <div class="holder-section-header">
                                <h4>📸 Second Holder Details</h4>
                            </div>

                            <div class="holder-content">
                                <!-- Second Holder Photo -->
                                <div class="photo-upload-area">
                                    <div class="photo-box" id="photoBoxSecond">
                                        <div class="photo-box-header">Second Holder Photo</div>
                                        <div class="photo-preview" id="previewSecond">
                                            <div class="photo-placeholder">
                                                <i>👤</i>
                                                <div>Click to upload<br>Second Holder Photo</div>
                                            </div>
                                            <input type="file" id="photoSecondHolder" name="photoSecondHolder"
                                                class="photo-upload-input" accept="image/*"
                                                onchange="handlePhotoUpload(this, 'Second')">
                                        </div>
                                        <button type="button" class="remove-photo-btn" onclick="removePhoto('Second')"
                                            title="Remove Photo">×</button>
                                        <div class="photo-info" id="infoSecond">No photo selected</div>
                                    </div>
                                </div>

                                <!-- Second Holder Details -->
                                <div class="holder-details">
                                    <table class="form-table">
                                        <tbody>
                                            <tr>
                                                <td>
                                                    <div class="form-group">
                                                        <label for="secondHolderDate">Second Holder Date</label>
                                                        <input type="date" id="secondHolderDate"
                                                            name="secondHolderDate">
                                                    </div>
                                                </td>
                                                <td>
                                                    <div class="form-group">
                                                        <label for="secondHolderPlace">Second Holder Place</label>
                                                        <input type="text" id="secondHolderPlace"
                                                            name="secondHolderPlace">
                                                    </div>
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>

                        <!-- Third Holder Section -->
                        <div class="holder-section">
                            <div class="holder-section-header">
                                <h4>📸 Third Holder Details</h4>
                            </div>

                            <div class="holder-content">
                                <!-- Third Holder Photo -->
                                <div class="photo-upload-area">
                                    <div class="photo-box" id="photoBoxThird">
                                        <div class="photo-box-header">Third Holder Photo</div>
                                        <div class="photo-preview" id="previewThird">
                                            <div class="photo-placeholder">
                                                <i>👤</i>
                                                <div>Click to upload<br>Third Holder Photo</div>
                                            </div>
                                            <input type="file" id="photoThirdHolder" name="photoThirdHolder"
                                                class="photo-upload-input" accept="image/*"
                                                onchange="handlePhotoUpload(this, 'Third')">
                                        </div>
                                        <button type="button" class="remove-photo-btn" onclick="removePhoto('Third')"
                                            title="Remove Photo">×</button>
                                        <div class="photo-info" id="infoThird">No photo selected</div>
                                    </div>
                                </div>

                                <!-- Third Holder Details -->
                                <div class="holder-details">
                                    <table class="form-table">
                                        <tbody>
                                            <tr>
                                                <td>
                                                    <div class="form-group">
                                                        <label for="thirdHolderDate">Third Holder Date</label>
                                                        <input type="date" id="thirdHolderDate" name="thirdHolderDate">
                                                    </div>
                                                </td>
                                                <td>
                                                    <div class="form-group">
                                                        <label for="thirdHolderPlace">Third Holder Place</label>
                                                        <input type="text" id="thirdHolderPlace"
                                                            name="thirdHolderPlace">
                                                    </div>
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
            </form>
            <!--*************************************************2nd layout*************************************************-->
            <form id="NonIndividualForm">
                <input type="hidden" id="recordId" name="recordId">
                <input type="hidden" id="recordStatus" name="recordStatus" value="draft">

                <!-- Step 1: First Holder -->
                <div class="form-step active" data-step="1" style="display: block;">
                    <h2 class="step-title">First/Sole Holder</h2>

                    <!-- Identity Details - First/Sole Holder (Starting section) -->
                    <div class="section-group">
                        <div class="section-title">IDENTITY DETAILS - First/Sole Holder</div>
                        <table class="form-table">
                            <tbody>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="Name" class="required-field">Name of Applicant</label>
                                            <input type="text" id="Name" name="Name" required>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="Place_of_Incorporation">First Holder B - Voter ID</label>
                                            <input type="text" id="Place_of_Incorporation"
                                                name="Place_of_Incorporation">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="CKYC_No">First Holder C - KYC No</label>
                                            <input type="text" id="CKYC_No" name="CKYC_No">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="PAN">First Holder PAN</label>
                                            <input type="text" id="PAN" name="PAN" pattern="[A-Z]{5}[0-9]{4}[A-Z]{1}">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="TAN">First Holder TAN</label>
                                            <input type="text" id="TAN" name="TAN">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="Status_Select_One">Status (Select One)</label>
                                            <select id="Status_Select_One" name="Status_Select_One">
                                                <option value="-None-">-None-</option>
                                                <option value="Private Limited Co.">Private Limited Co.</option>
                                                <option value="Public Limited Co.">Public Limited Co.</option>
                                                <option value="Body Corporate">Body Corporate</option>
                                                <option value="Partnership">Partnership</option>
                                                <option value="Trust">Trust</option>
                                                <option value="Charity">Charity</option>
                                                <option value="NGO">NGO</option>
                                                <option value="FI">FI</option>
                                                <option value="FII">FII</option>
                                                <option value="FPI">FPI</option>
                                                <option value="HUF">HUF</option>
                                                <option value="AOP">AOP</option>
                                                <option value="Bank">Bank</option>
                                                <option value="Government Body">Government Body</option>
                                                <option value="Non-Government Org.">Non-Government Org.</option>
                                                <option value="Defense Establishment">Defense Establishment</option>
                                                <option value="BOI">BOI</option>
                                                <option value="Society">Society</option>
                                                <option value="LLP">LLP</option>
                                                <option value="Others">Others</option>
                                            </select>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="Date_of_Birth">Date of Incorporation</label>
                                            <input type="date" id="Date_of_Birth" name="Date_of_Birth">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="Date_of_Commencement_of_Business">Date of Commencement of
                                                Business</label>
                                            <input type="date" id="Date_of_Commencement_of_Business"
                                                name="Date_of_Commencement_of_Business">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="GST_No">First Holder_GST No</label>
                                            <input type="text" id="GST_No" name="GST_No">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="Registration_No_e_g_CIN">Registration No. (e.g. CIN)</label>
                                            <input type="text" id="Registration_No_e_g_CIN"
                                                name="Registration_No_e_g_CIN">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td colspan="2">
                                        <div class="form-group">
                                            <label for="Sales_Type">Sales Type</label>
                                            <select id="Sales_Type" name="Sales_Type">
                                                <option value="-None-">-None-</option>
                                                <option value="Direct">Direct</option>
                                                <option value="Channel">Channel</option>
                                                <option value="Offshore">Offshore</option>
                                            </select>
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    <!-- ADDRESS DETAILS - First/Sole Holder -->
                    <div class="section-group">
                        <div class="section-title">ADDRESS DETAILS - First/Sole Holder</div>
                        <table class="form-table">
                            <tbody>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="Address_for_Correspondence_Local_Address_in_case">Address for
                                                Correspondence/ Local Address in case</label>
                                            <input type="text" id="Address_for_Correspondence_Local_Address_in_case"
                                                name="Address_for_Correspondence_Local_Address_in_case">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="FH_Pincode">First Holder Pincode</label>
                                            <input type="text" id="FH_Pincode" name="FH_Pincode" pattern="[0-9]{6}">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="FH_Country">First Holder Country</label>
                                            <input type="text" id="FH_Country" name="FH_Country">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="FH_Mobile">First Holder Mobile</label>
                                            <input type="tel" id="FH_Mobile" name="FH_Mobile" pattern="[0-9]{10}">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="Registered_Address">Registered Address</label>
                                            <input type="text" id="Registered_Address" name="Registered_Address">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="Pincode_AD">Pincode AD</label>
                                            <input type="text" id="Pincode_AD" name="Pincode_AD" pattern="[0-9]{6}">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="Country_AD">Country AD</label>
                                            <input type="text" id="Country_AD" name="Country_AD">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="Mobile_AD">Mobile AD</label>
                                            <input type="tel" id="Mobile_AD" name="Mobile_AD" pattern="[0-9]{10}">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="FH_City_Town_Village">First Holder City/Town/Village</label>
                                            <input type="text" id="FH_City_Town_Village" name="FH_City_Town_Village">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="FH_State">First Holder State</label>
                                            <input type="text" id="FH_State" name="FH_State">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="FH_Telephone">First Holder Telephone</label>
                                            <input type="tel" id="FH_Telephone" name="FH_Telephone">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="Email_ID_AD">Email ID</label>
                                            <input type="email" id="Email_ID_AD" name="Email_ID_AD">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="Specify_proof_of_address_submitted_for_Permanent_A">Specify
                                                proof of address submitted for Permanent A</label>
                                            <input type="text" id="Specify_proof_of_address_submitted_for_Permanent_A"
                                                name="Specify_proof_of_address_submitted_for_Permanent_A">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="City_Town_Village_AD">City/Town/Village</label>
                                            <input type="text" id="City_Town_Village_AD" name="City_Town_Village_AD">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="State_AD">State</label>
                                            <input type="text" id="State_AD" name="State_AD">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="Telephone_AD">Telephone</label>
                                            <input type="tel" id="Telephone_AD" name="Telephone_AD">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td colspan="2">
                                        <div class="form-group">
                                            <label for="Specify_Proof_of_Address_for_Correspondence_AD">Specify the
                                                Proof of Address for Correspondence_AD</label>
                                            <input type="text" id="Specify_Proof_of_Address_for_Correspondence_AD"
                                                name="Specify_Proof_of_Address_for_Correspondence_AD">
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    <!-- OTHER DETAILS - First/Sole Holder (Non-Individual) -->
                    <div class="section-group">
                        <div class="section-title">OTHER DETAILS - First/Sole Holder</div>
                        <table class="form-table">
                            <tbody>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="Net_worth_Not_older_than_1_year_NI">Net worth (Not older than 1
                                                year)</label>
                                            <input type="number" id="Net_worth_Not_older_than_1_year_NI"
                                                name="Net_worth_Not_older_than_1_year_NI" step="0.01" min="0">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="FH_Income_Range_per_annum_NI">First Holder Income Range (per
                                                annum)</label>
                                            <select id="FH_Income_Range_per_annum_NI"
                                                name="FH_Income_Range_per_annum_NI">
                                                <option value="-None-">-None-</option>
                                                <option value="Below Rs.1 Lakh">Below Rs.1 Lakh</option>
                                                <option value="Rs. 1 Lakh to Rs. 5 Lakhs">Rs. 1 Lakh to Rs. 5 Lakhs
                                                </option>
                                                <option value="Rs. 5 Lakhs to Rs. 10 Lakhs">Rs. 5 Lakhs to Rs. 10 Lakhs
                                                </option>
                                                <option value="Rs. 10 Lakhs to 25 Lakhs">Rs. 10 Lakhs to 25 Lakhs
                                                </option>
                                                <option value="Rs. 25 Lakhs to Rs. 1 Crore">Rs. 25 Lakhs to Rs. 1 Crore
                                                </option>
                                                <option value="Rs. 1 Crore">Rs. 1 Crore</option>
                                            </select>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="Type_of_Company_Firm_NI">Type of Company/Firm_NI</label>
                                            <input type="text" id="Type_of_Company_Firm_NI"
                                                name="Type_of_Company_Firm_NI">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="Investment_Experience_in_Listed_Equities_NI">Investment
                                                Experience in Listed Equities (if any)</label>
                                            <input type="text" id="Investment_Experience_in_Listed_Equities_NI"
                                                name="Investment_Experience_in_Listed_Equities_NI">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="FH_As_on_Date_NI">First Holder As on Date</label>
                                            <input type="date" id="FH_As_on_Date_NI" name="FH_As_on_Date_NI">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="Nature_of_Business_Occupation_NI">Nature of
                                                Business/Occupation_NI</label>
                                            <input type="text" id="Nature_of_Business_Occupation_NI"
                                                name="Nature_of_Business_Occupation_NI">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="FH_Sources_of_Funds_NI">First Holder Sources of Funds</label>
                                            <select id="FH_Sources_of_Funds_NI" name="FH_Sources_of_Funds_NI">
                                                <option value="-None-">-None-</option>
                                                <option value="Own & Family">Own & Family</option>
                                                <option value="Borrowed">Borrowed</option>
                                            </select>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="FH_Any_other_information_NI">First Holder Any other
                                                information</label>
                                            <input type="text" id="FH_Any_other_information_NI"
                                                name="FH_Any_other_information_NI">
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    <!-- BANK ACCOUNT DETAILS OF THE ENTITY -->
                    <div class="section-group">
                        <div class="section-title">BANK ACCOUNT DETAILS OF THE ENTITY</div>
                        <table class="form-table">
                            <tbody>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="FH_Bank_Name">First Holder Bank Name</label>
                                            <input type="text" id="FH_Bank_Name" name="FH_Bank_Name">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="FH_IFSC_Code">First Holder IFSC Code</label>
                                            <input type="text" id="FH_IFSC_Code" name="FH_IFSC_Code">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="FH_Account_No">First Holder Account No.</label>
                                            <input type="text" id="FH_Account_No" name="FH_Account_No">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="FH_Branch">First Holder Branch</label>
                                            <input type="text" id="FH_Branch" name="FH_Branch">
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td colspan="2">
                                        <div class="form-group">
                                            <label for="FH_Account_Type">First Holder Account Type</label>
                                            <select id="FH_Account_Type" name="FH_Account_Type">
                                                <option value="-None-">-None-</option>
                                                <option value="Saving">Saving</option>
                                                <option value="Current">Current</option>
                                            </select>
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    <!-- INVESTMENT PROFILE AND OBJECTIVES OF THE CLIENT (Non-Individual) -->
                    <div class="section-group">
                        <div class="section-title">INVESTMENT PROFILE AND OBJECTIVES OF THE CLIENT</div>
                        <table class="form-table">
                            <tbody>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="Risk_Tolerance_for_Investment">Risk Tolerance for
                                                Investment</label>
                                            <select id="Risk_Tolerance_for_Investment"
                                                name="Risk_Tolerance_for_Investment">
                                                <option value="-None-">-None-</option>
                                                <option value="Low">Low</option>
                                                <option value="Medium">Medium</option>
                                                <option value="High">High</option>
                                            </select>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="Indicative_Time_Period_of_Investments">Indicative Time Period of
                                                Investments</label>
                                            <select id="Indicative_Time_Period_of_Investments"
                                                name="Indicative_Time_Period_of_Investments">
                                                <option value="-None-">-None-</option>
                                                <option value="<3 years">&lt;3 years</option>
                                                <option value="3-5 years">3-5 years</option>
                                                <option value="5 years">5 years</option>
                                            </select>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="FH_Overall_Investment_Goals">First Holder Overall Investment
                                                Goals</label>
                                            <select id="FH_Overall_Investment_Goals" name="FH_Overall_Investment_Goals">
                                                <option value="-None-">-None-</option>
                                                <option value="Capital Appreciation & Regular Income">Capital
                                                    Appreciation & Regular Income</option>
                                                <option value="Regular Income">Regular Income</option>
                                            </select>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="Preferred_Asset_Class">Preferred Asset Class</label>
                                            <select id="Preferred_Asset_Class" name="Preferred_Asset_Class">
                                                <option value="-None-">-None-</option>
                                                <option value="Equity">Equity</option>
                                                <option value="Balanced">Balanced</option>
                                                <option value="Debt">Debt</option>
                                                <option value="Mutual Funds">Mutual Funds</option>
                                                <option value="Venture Capital">Venture Capital</option>
                                                <option value="Others">Others</option>
                                                <option value="As per Product Opted">As per Product Opted</option>
                                            </select>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="Investment_Experience_in_Equity_Markets">Investment Experience
                                                in Equity Markets</label>
                                            <select id="Investment_Experience_in_Equity_Markets"
                                                name="Investment_Experience_in_Equity_Markets">
                                                <option value="-None-">-None-</option>
                                                <option value="<3 years">&lt;3 years</option>
                                                <option value="3-5 years">3-5 years</option>
                                                <option value="5 years">5 years</option>
                                            </select>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="Systematic_Transfer_Plan">Systematic Transfer Plan</label>
                                            <select id="Systematic_Transfer_Plan" name="Systematic_Transfer_Plan">
                                                <option value="-None-">-None-</option>
                                                <option value="Monthly">Monthly</option>
                                                <option value="Date">Date</option>
                                                <option value="Not Required">Not Required</option>
                                            </select>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="Indicative_Total_Investment_Portfolio_Propose">Indicative % of
                                                Total Investment Portfolio propose</label>
                                            <input type="number" id="Indicative_Total_Investment_Portfolio_Propose"
                                                name="Indicative_Total_Investment_Portfolio_Propose" min="0" max="100"
                                                step="0.01">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="Type_of_PMS_Account">Type of PMS Account</label>
                                            <select id="Type_of_PMS_Account" name="Type_of_PMS_Account">
                                                <option value="-None-">-None-</option>
                                                <option value="Discretionary PMS">Discretionary PMS</option>
                                            </select>
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    <!-- Client Introduced by Section -->
                    <div class="section-group">
                        <div class="section-title">Client Introduced by</div>
                        <table class="form-table">
                            <tbody>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="Client_Name">Client Name</label>
                                            <input type="text" id="Client_Name" name="Client_Name">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="Address">Address</label>
                                            <textarea id="Address" name="Address" rows="3"></textarea>
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    <!-- Replace the existing photo upload container in NonIndividualForm with this enhanced version -->
                    <div class="section-group">
                        <div class="section-title">APPLICANT DECLARATION</div>

                        <!-- Photo Upload Instructions -->
                        <div class="photo-instructions">
                            <h4>📷 Photo Upload Requirements:</h4>
                            <ul>
                                <li>Upload clear, passport-size photographs</li>
                                <li>Accepted formats: JPG, PNG, GIF</li>
                                <li>Maximum file size: 2MB per photo</li>
                                <li>Photos should be recent and clearly visible</li>
                            </ul>
                        </div>

                        <!-- First Holder Section -->
                        <div class="holder-section">
                            <div class="holder-section-header">
                                <h4>📸 First Holder Details</h4>
                            </div>

                            <div class="holder-content">
                                <!-- First Holder Photo -->
                                <div class="photo-upload-area">
                                    <div class="photo-box" id="photoBoxFirst">
                                        <div class="photo-box-header">First Holder Photo</div>
                                        <div class="photo-preview" id="previewFirst">
                                            <div class="photo-placeholder">
                                                <i>👤</i>
                                                <div>Click to upload<br>First Holder Photo</div>
                                            </div>
                                            <input type="file" id="photoFirstHolder" name="photoFirstHolder"
                                                class="photo-upload-input" accept="image/*"
                                                onchange="handlePhotoUpload(this, 'First')">
                                        </div>
                                        <button type="button" class="remove-photo-btn" onclick="removePhoto('First')"
                                            title="Remove Photo">×</button>
                                        <div class="photo-info" id="infoFirst">No photo selected</div>
                                    </div>
                                </div>

                                <!-- First Holder Details -->
                                <div class="holder-details">
                                    <table class="form-table">
                                        <tbody>
                                            <tr>
                                                <td>
                                                    <div class="form-group">
                                                        <label for="firstHolderDateNI">First Holder Date</label>
                                                        <input type="date" id="firstHolderDateNI"
                                                            name="firstHolderDateNI">
                                                    </div>
                                                </td>
                                                <td>
                                                    <div class="form-group">
                                                        <label for="firstHolderPlaceNI">First Holder Place</label>
                                                        <input type="text" id="firstHolderPlaceNI"
                                                            name="firstHolderPlaceNI" placeholder="Enter place">
                                                    </div>
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>

                        <!-- Second Holder Section -->
                        <div class="holder-section">
                            <div class="holder-section-header">
                                <h4>📸 Second Holder Details</h4>
                            </div>

                            <div class="holder-content">
                                <!-- Second Holder Photo -->
                                <div class="photo-upload-area">
                                    <div class="photo-box" id="photoBoxSecond">
                                        <div class="photo-box-header">Second Holder Photo</div>
                                        <div class="photo-preview" id="previewSecond">
                                            <div class="photo-placeholder">
                                                <i>👤</i>
                                                <div>Click to upload<br>Second Holder Photo</div>
                                            </div>
                                            <input type="file" id="photoSecondHolder" name="photoSecondHolder"
                                                class="photo-upload-input" accept="image/*"
                                                onchange="handlePhotoUpload(this, 'Second')">
                                        </div>
                                        <button type="button" class="remove-photo-btn" onclick="removePhoto('Second')"
                                            title="Remove Photo">×</button>
                                        <div class="photo-info" id="infoSecond">No photo selected</div>
                                    </div>
                                </div>

                                <!-- Second Holder Details -->
                                <div class="holder-details">
                                    <table class="form-table">
                                        <tbody>
                                            <tr>
                                                <td>
                                                    <div class="form-group">
                                                        <label for="secondHolderDateNI">Second Holder Date</label>
                                                        <input type="date" id="secondHolderDateNI"
                                                            name="secondHolderDateNI">
                                                    </div>
                                                </td>
                                                <td>
                                                    <div class="form-group">
                                                        <label for="secondHolderPlaceNI">Second Holder Place</label>
                                                        <input type="text" id="secondHolderPlaceNI"
                                                            name="secondHolderPlaceNI" placeholder="Enter place">
                                                    </div>
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>

                        <!-- Third Holder Section -->
                        <div class="holder-section">
                            <div class="holder-section-header">
                                <h4>📸 Third Holder Details</h4>
                            </div>

                            <div class="holder-content">
                                <!-- Third Holder Photo -->
                                <div class="photo-upload-area">
                                    <div class="photo-box" id="photoBoxThird">
                                        <div class="photo-box-header">Third Holder Photo</div>
                                        <div class="photo-preview" id="previewThird">
                                            <div class="photo-placeholder">
                                                <i>👤</i>
                                                <div>Click to upload<br>Third Holder Photo</div>
                                            </div>
                                            <input type="file" id="photoThirdHolder" name="photoThirdHolder"
                                                class="photo-upload-input" accept="image/*"
                                                onchange="handlePhotoUpload(this, 'Third')">
                                        </div>
                                        <button type="button" class="remove-photo-btn" onclick="removePhoto('Third')"
                                            title="Remove Photo">×</button>
                                        <div class="photo-info" id="infoThird">No photo selected</div>
                                    </div>
                                </div>

                                <!-- Third Holder Details -->
                                <div class="holder-details">
                                    <table class="form-table">
                                        <tbody>
                                            <tr>
                                                <td>
                                                    <div class="form-group">
                                                        <label for="thirdHolderDateNI">Third Holder Date</label>
                                                        <input type="date" id="thirdHolderDateNI"
                                                            name="thirdHolderDateNI">
                                                    </div>
                                                </td>
                                                <td>
                                                    <div class="form-group">
                                                        <label for="thirdHolderPlaceNI">Third Holder Place</label>
                                                        <input type="text" id="thirdHolderPlaceNI"
                                                            name="thirdHolderPlaceNI" placeholder="Enter place">
                                                    </div>
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Details of Promoters Section -->
                    <div class="section-group">
                        <div class="section-title">DETAILS OF PROMOTERS</div>
                        <table class="form-table">
                            <tbody>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="Promoter_Name_of_Applicant">Name of Applicant of
                                                Promoter</label>
                                            <input type="text" id="Promoter_Name_of_Applicant"
                                                name="Promoter_Name_of_Applicant">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <label for="Promoter_FH_PAN_Card">First Holder_PAN card</label>
                                            <input type="text" id="Promoter_FH_PAN_Card" name="Promoter_FH_PAN_Card">
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>



                    <!-- Updated Subform HTML Structure -->
                    <div class="section-group">
                        <div class="section-title">
                            <span>DETAILS OF PROMOTER (SUB SECTION)</span>
                            <button type="button" onclick="addPromoterRow()" class="btn-add-promoter">
                                ADD PROMOTER
                            </button>
                        </div>

                        <!-- Subform Container -->
                        <div id="promoterSubformContainer" class="promoter-subform-container">
                            <!-- Template row (hidden) -->
                            <div id="promoterRowTemplate" class="promoter-row" style="display: none;">
                                <div class="promoter-row-header">
                                    <h4>Promoter Details</h4>
                                    <button type="button" onclick="removePromoterRow(this)" class="btn-remove-promoter">
                                        REMOVE
                                    </button>
                                </div>

                                <div class="promoter-grid">
                                    <div class="form-group" data-field-type="sr-no">
                                        <label for="Promoter_Sr_No">Sr. No</label>
                                        <input type="text" name="Promoter_Sr_No[]" class="promoter-field"
                                            placeholder="1">
                                    </div>

                                    <div class="form-group" data-field-type="pan">
                                        <label for="Promoter_PAN">PAN</label>
                                        <input type="text" name="Promoter_PAN[]" class="promoter-field"
                                            placeholder="ABCDE1234F">
                                    </div>

                                    <div class="form-group" data-field-type="name">
                                        <label for="Promoter_Name">Name</label>
                                        <input type="text" name="Promoter_Name[]" class="promoter-field"
                                            placeholder="Full Name">
                                    </div>

                                    <div class="form-group" data-field-type="din-uid">
                                        <label for="Promoter_DIN_UID">DIN and UID for Directors/Other</label>
                                        <input type="text" name="Promoter_DIN_UID[]" class="promoter-field"
                                            placeholder="DIN/UID">
                                    </div>

                                    <div class="form-group" data-field-type="address">
                                        <label for="Promoter_Address">Residential / Registered Address</label>
                                        <textarea name="Promoter_Address[]" class="promoter-field"
                                            placeholder="Complete Address"></textarea>
                                    </div>

                                    <div class="form-group" data-field-type="relationship">
                                        <label for="Promoter_Relationship">Relationship with Applicant</label>
                                        <input type="text" name="Promoter_Relationship[]" class="promoter-field"
                                            placeholder="Relationship">
                                    </div>

                                    <div class="form-group" data-field-type="pep">
                                        <label for="Promoter_PEP">Whether Politically Exposed</label>
                                        <select name="Promoter_PEP[]" class="promoter-field">
                                            <option value="-None-">-None-</option>
                                            <option value="PEP">PEP</option>
                                            <option value="RPEP">RPEP</option>
                                            <option value="NO">NO</option>
                                        </select>
                                    </div>

                                    <div class="form-group" data-field-type="file">
                                        <label for="Promoter_Photograph">Photograph</label>
                                        <input type="file" name="Promoter_Photograph[]" class="promoter-field"
                                            accept="image/*">
                                    </div>
                                </div>
                            </div>

                            <!-- Dynamic rows will be added here -->
                        </div>
                    </div>

                    <!-- ...existing code... -->

                    <!-- ...existing code... -->

                    <!-- ...existing code... -->

                    <!-- Details of UBO Sub Section -->
                    <div class="section-group">
                        <div class="section-title">
                            <span>DETAILS OF UBO (ULTIMATE BENEFICIAL OWNER)</span>
                            <button type="button" onclick="addUBORow()" class="btn-add-promoter">
                                ADD UBO
                            </button>
                        </div>

                        <!-- UBO Subform Container -->
                        <div id="uboSubformContainer" class="promoter-subform-container">
                            <!-- Template row (hidden) -->
                            <div id="uboRowTemplate" class="promoter-row" style="display: none;">
                                <div class="promoter-row-header">
                                    <h4>UBO Details</h4>
                                    <button type="button" onclick="removeUBORow(this)" class="btn-remove-promoter">
                                        REMOVE
                                    </button>
                                </div>

                                <div class="promoter-grid">
                                    <div class="form-group" data-field-type="name">
                                        <label for="UBO_Name">Name</label>
                                        <input type="text" name="UBO_Name[]" class="ubo-field" placeholder="Full Name">
                                    </div>

                                    <div class="form-group" data-field-type="dob">
                                        <label for="UBO_Date_of_Birth">Date of Birth</label>
                                        <input type="date" name="UBO_Date_of_Birth[]" class="ubo-field">
                                    </div>

                                    <div class="form-group" data-field-type="pan">
                                        <label for="UBO_PAN">PAN</label>
                                        <input type="text" name="UBO_PAN[]" class="ubo-field" placeholder="ABCDE1234F">
                                    </div>

                                    <div class="form-group" data-field-type="nationality">
                                        <label for="UBO_Nationality">Nationality</label>
                                        <input type="text" name="UBO_Nationality[]" class="ubo-field"
                                            placeholder="Indian">
                                    </div>

                                    <div class="form-group" data-field-type="holding">
                                        <label for="UBO_Percentage_of_Holding">% of Holding</label>
                                        <input type="number" name="UBO_Percentage_of_Holding[]" class="ubo-field"
                                            min="0" max="100" step="0.01" placeholder="25.00">
                                    </div>
                                </div>
                            </div>

                            <!-- Dynamic UBO rows will be added here -->
                        </div>
                    </div>
                    <!-- Onboarding Status Section - Non-Individual -->
                    <div class="section-group">
                        <div class="section-title">Onboarding Status</div>
                        <table class="form-table">
                            <tbody>
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            <label for="Onboarding_Status">Onboarding Status</label>
                                            <select id="Onboarding_Status" name="Onboarding_Status">
                                                <option value="-None-">-None-</option>
                                                <option value="None">None</option>
                                                <option value="Detailed Documentation">Detailed Documentation
                                                </option>
                                                <option value="KYC Verifying">KYC Verifying</option>
                                                <option value="AML Verifyingg">AML Verifyingg</option>
                                                <option value="Checker Verifyingg">Checker Verifyingg</option>
                                                <option value="Penny Pay Verifyingg">Penny Pay Verifyingg</option>
                                                <option value="Demat Verifyingg">Demat Verifyingg</option>
                                                <option value="Document Scannedd">Document Scannedd</option>
                                                <option value="Welcome Kit Sharedd">Welcome Kit Sharedd</option>
                                                <option value="Onbaording Completed">Onbaording Completed</option>
                                            </select>
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
            </form>
        </div>

        <div class="button-group">
            <div>
                <button type="button" id="prevBtn" class="btn btn-secondary" onclick="changeStep(-1)"
                    style="display: none;">Previous</button>
            </div>
            <div>
                <button type="button" id="saveDraftBtn" class="btn btn-outline" onclick="saveDraft()">Save as
                    Draft</button>
                <button type="button" id="nextBtn" class="btn btn-primary" onclick="changeStep(1)">Next</button>
                <button type="button" id="submitBtn" class="btn btn-success hidden"
                    onclick="submitForm()">Submit</button>
            </div>
        </div>
    </div>
    </div>

    <!-- Updated Zoho SDK -->
    <script src="https://live.zwidgets.com/js-sdk/1.2/ZohoEmbededAppSDK.min.js"></script>
    <script>
        // Widget Configuration
        const WIDGET_CONFIG = {
            currentStep: 1,
            totalSteps: 4,
            recordId: null, // Remove static value
            isEditMode: false,
            recordStatus: 'draft',
            currentRecordData: null,
            isZohoInitialized: false
        };

        // Add these constants after WIDGET_CONFIG (around line 60)
        const LAYOUT_IDS = {
            INDIVIDUAL_NRI: '832485000000688002',
            NON_INDIVIDUAL: '832485000000902277'
        };

        let currentLayoutId = null; // Track current layout

        // Wait for DOM and Zoho SDK initialization
        document.addEventListener('DOMContentLoaded', function () {
            // Initialize progress bar and buttons immediately
            updateProgressBar();
            updateButtons();
            initializeZohoSDK();
        });
        // ...existing code...

        // UBO Subform Management Functions
        let uboRowCounter = 0;

        function addUBORow(data = null) {
            const container = document.getElementById('uboSubformContainer');
            const template = document.getElementById('uboRowTemplate');

            if (!container || !template) {
                console.error('UBO subform container or template not found');
                return;
            }

            // Clone the template
            const newRow = template.cloneNode(true);
            uboRowCounter++;

            // Update IDs and make visible
            newRow.id = `uboRow_${uboRowCounter}`;
            newRow.style.display = 'block';

            // Update header title with counter
            const header = newRow.querySelector('.promoter-row-header h4');
            if (header) {
                header.textContent = `UBO Details #${uboRowCounter}`;
            }

            // Update field names to include row index
            const fields = newRow.querySelectorAll('.ubo-field');
            fields.forEach(field => {
                const baseName = field.name.replace('[]', '');
                field.name = `${baseName}_${uboRowCounter}`;
                field.id = `${baseName}_${uboRowCounter}`;

                // Add placeholder enhancement only for user-added rows
                if (!data && field.placeholder) {
                    field.placeholder = `${field.placeholder} for UBO ${uboRowCounter}`;
                }
            });

            // Populate with data if provided
            if (data) {
                populateUBORow(newRow, data);
            }

            // Add to container
            container.appendChild(newRow);

            // Only scroll and show alert if this is a user-initiated action (not initial load)
            if (!data) {
                setTimeout(() => {
                    newRow.scrollIntoView({
                        behavior: 'smooth',
                        block: 'nearest'
                    });
                }, 100);

                showAlert(`UBO #${uboRowCounter} added successfully!`, 'success');
            }

            console.log('Added UBO row:', uboRowCounter);
        }

        function removeUBORow(button) {
            const row = button.closest('.promoter-row');
            if (row) {
                // Get row number for confirmation
                const rowNumber = row.id.split('_')[1] || 'this';

                // Confirm deletion
                if (confirm(`Are you sure you want to remove UBO #${rowNumber}?`)) {
                    // Add fade out animation
                    row.style.transition = 'all 0.3s ease';
                    row.style.opacity = '0';
                    row.style.transform = 'translateY(-20px)';

                    setTimeout(() => {
                        row.remove();
                        showAlert('UBO details removed successfully!', 'info');
                    }, 300);
                }
            }
        }

        // Enhanced populate function for UBO with better error handling
        // ...existing code...

        // Enhanced populate function for UBO with updated field mapping
        // ...existing code...

        // Enhanced populate function for UBO with updated field mapping (removed Document field)
        function populateUBORow(rowElement, data) {
            console.log('Populating UBO row with data:', data);

            const uboSubformFieldMapping = {
                'Name1': 'UBO_Name',
                'Date_of_Birth': 'UBO_Date_of_Birth',
                'PAN': 'UBO_PAN',
                'Nationality': 'UBO_Nationality',
                'Percentage_of_Holding': 'UBO_Percentage_of_Holding'
            };

            Object.keys(data).forEach(crmFieldName => {
                const widgetFieldName = uboSubformFieldMapping[crmFieldName];

                if (widgetFieldName && data[crmFieldName] !== null && data[crmFieldName] !== undefined) {
                    const input = rowElement.querySelector(`[name*="${widgetFieldName}"]`);

                    if (input) {
                        console.log(`Populating ${widgetFieldName} with value:`, data[crmFieldName]);

                        if (input.type === 'date') {
                            // Handle date inputs
                            if (data[crmFieldName]) {
                                const date = new Date(data[crmFieldName]);
                                if (!isNaN(date.getTime())) {
                                    input.value = date.toISOString().split('T')[0];
                                }
                            }
                        } else {
                            input.value = data[crmFieldName];

                            // Add visual feedback for populated fields
                            input.style.backgroundColor = '#f0f7ff';
                            setTimeout(() => {
                                input.style.backgroundColor = '';
                            }, 1000);
                        }
                    } else {
                        console.warn(`Input field not found for ${widgetFieldName} in UBO subform row`);
                    }
                }
            });
        }

        // Enhanced data collection with validation for UBO (removed Document field)
        function collectUBOSubformData() {
            const subformData = [];
            const rows = document.querySelectorAll('#uboSubformContainer .promoter-row:not(#uboRowTemplate)');

            const widgetToCrmMapping = {
                'UBO_Name': 'Name1',
                'UBO_Date_of_Birth': 'Date_of_Birth',
                'UBO_PAN': 'PAN',
                'UBO_Nationality': 'Nationality',
                'UBO_Percentage_of_Holding': 'Percentage_of_Holding'
            };

            rows.forEach((row, index) => {
                const rowData = {};
                const fields = row.querySelectorAll('.ubo-field');
                let hasData = false;

                fields.forEach(field => {
                    const fieldBaseName = field.name.replace(/_\d+$/, '');
                    const crmFieldName = widgetToCrmMapping[fieldBaseName];

                    if (crmFieldName && field.value && field.value.trim() !== '' && field.value !== '-None-') {
                        hasData = true;
                        if (field.type === 'number') {
                            rowData[crmFieldName] = parseFloat(field.value) || 0;
                        } else {
                            rowData[crmFieldName] = field.value.trim();
                        }
                    }
                });

                // Only add row if it has meaningful data
                if (hasData) {
                    subformData.push(rowData);
                }
            });

            console.log('Collected UBO subform data:', subformData);
            return subformData;
        }

        // ...existing code...

        // Enhanced data collection with validation for UBO (updated field mapping)
        function collectUBOSubformData() {
            const subformData = [];
            const rows = document.querySelectorAll('#uboSubformContainer .promoter-row:not(#uboRowTemplate)');

            const widgetToCrmMapping = {
                'UBO_Name': 'Name1',
                'UBO_Date_of_Birth': 'Date_of_Birth',
                'UBO_PAN': 'PAN',
                'UBO_Nationality': 'Nationality',
                'UBO_Percentage_of_Holding': 'Percentage_of_Holding',
                'UBO_Document': 'Document'
            };

            rows.forEach((row, index) => {
                const rowData = {};
                const fields = row.querySelectorAll('.ubo-field');
                let hasData = false;

                fields.forEach(field => {
                    const fieldBaseName = field.name.replace(/_\d+$/, '');
                    const crmFieldName = widgetToCrmMapping[fieldBaseName];

                    if (crmFieldName && field.value && field.value.trim() !== '' && field.value !== '-None-') {
                        hasData = true;
                        if (field.type === 'file' && field.files && field.files[0]) {
                            rowData[crmFieldName] = field.files[0].name;
                        } else if (field.type === 'number') {
                            rowData[crmFieldName] = parseFloat(field.value) || 0;
                        } else {
                            rowData[crmFieldName] = field.value.trim();
                        }
                    }
                });

                // Only add row if it has meaningful data
                if (hasData) {
                    subformData.push(rowData);
                }
            });

            console.log('Collected UBO subform data:', subformData);
            return subformData;
        }

        // ...existing code...

        // Enhanced data collection with validation for UBO
        function collectUBOSubformData() {
            const subformData = [];
            const rows = document.querySelectorAll('#uboSubformContainer .promoter-row:not(#uboRowTemplate)');

            const widgetToCrmMapping = {
                'UBO_Sr_No': 'Sr_No',
                'UBO_Name': 'Name1',
                'UBO_Date_of_Birth': 'Date_of_Birth',
                'UBO_PAN': 'PAN',
                'UBO_Nationality': 'Nationality',
                'UBO_Percentage_of_Holding': 'Percentage_of_Holding',
                'UBO_Address': 'Address',
                'UBO_Document': 'Document'
            };

            rows.forEach((row, index) => {
                const rowData = {};
                const fields = row.querySelectorAll('.ubo-field');
                let hasData = false;

                fields.forEach(field => {
                    const fieldBaseName = field.name.replace(/_\d+$/, '');
                    const crmFieldName = widgetToCrmMapping[fieldBaseName];

                    if (crmFieldName && field.value && field.value.trim() !== '' && field.value !== '-None-') {
                        hasData = true;
                        if (field.type === 'file' && field.files && field.files[0]) {
                            rowData[crmFieldName] = field.files[0].name;
                        } else if (field.type === 'number') {
                            rowData[crmFieldName] = parseFloat(field.value) || 0;
                        } else {
                            rowData[crmFieldName] = field.value.trim();
                        }
                    }
                });

                // Only add row if it has meaningful data
                if (hasData) {
                    // Auto-assign serial number if not provided
                    if (!rowData.Sr_No) {
                        rowData.Sr_No = (index + 1).toString();
                    }
                    subformData.push(rowData);
                }
            });

            console.log('Collected UBO subform data:', subformData);
            return subformData;
        }

        // Initialize UBO subform with one default row
        function initializeUBOSubform() {
            const existingRows = document.querySelectorAll('#uboSubformContainer .promoter-row:not(#uboRowTemplate)');
            if (existingRows.length === 0) {
                addUBORow();
            }
        }

        // Enhanced initialization for non-individual form
        document.addEventListener('DOMContentLoaded', function () {
            setTimeout(() => {
                if (currentLayoutId === LAYOUT_IDS.NON_INDIVIDUAL) {
                    initializePromoterSubform();
                    initializeUBOSubform();
                }
            }, 500);
        });

        // ...existing code...
        // Add this function before initializeWidget function (around line 2700)
        async function detectAndSetLayout(recordId = null) {
            try {
                let layoutId = null;

                if (recordId && WIDGET_CONFIG.isZohoInitialized) {
                    // Get layout from existing record
                    const response = await ZOHO.CRM.API.getRecord({
                        Entity: "Onboarding",
                        RecordID: recordId
                    });

                    if (response && response.data && response.data.length > 0) {
                        layoutId = response.data[0].Layout?.id;
                        console.log('Layout ID from existing record:', layoutId);
                    }
                }

                if (!layoutId && WIDGET_CONFIG.isZohoInitialized) {
                    // Try to get layout from current page context
                    try {
                        const pageInfo = await ZOHO.CRM.UI.Page.getPageInfo();
                        layoutId = pageInfo?.layout?.id;
                        console.log('Layout ID from page context:', layoutId);
                    } catch (error) {
                        console.log('Could not get layout from page context:', error);
                    }
                }

                // Default to Individual layout if no layout detected
                if (!layoutId) {
                    console.log('No layout detected, defaulting to Individual layout');
                    layoutId = LAYOUT_IDS.INDIVIDUAL_NRI;
                }

                currentLayoutId = layoutId;
                showFormByLayout(layoutId);

                return layoutId;
            } catch (error) {
                console.error('Error detecting layout:', error);
                // Default to Individual layout on error
                currentLayoutId = LAYOUT_IDS.INDIVIDUAL_NRI;
                showFormByLayout(LAYOUT_IDS.INDIVIDUAL_NRI);
                return LAYOUT_IDS.INDIVIDUAL_NRI;
            }
        }
        // Function to update the layout heading based on current layout
        function updateLayoutHeading(layoutId) {
            const layoutHeading = document.getElementById('layoutHeading');
            const layoutTitle = document.getElementById('layoutTitle');
            const layoutDescription = document.getElementById('layoutDescription');
            const headerSubtitle = document.getElementById('headerSubtitle');

            if (!layoutHeading || !layoutTitle || !layoutDescription) {
                console.warn('Layout heading elements not found');
                return;
            }

            // Define layout-specific content
            const layoutContent = {
                [LAYOUT_IDS.INDIVIDUAL_NRI]: {
                    title: "Individual / NRI Onboarding",
                    //description: "Personal investment account for individual investors and Non-Resident Indians",
                    showSteps: true
                },
                [LAYOUT_IDS.NON_INDIVIDUAL]: {
                    title: "Non-Individual Entity Onboarding",
                    //description: "Corporate and institutional investment account opening",
                    showSteps: false
                }
            };

            const content = layoutContent[layoutId];

            if (content) {
                // Update the heading content
                layoutTitle.textContent = content.title;
                layoutDescription.textContent = content.description;

                // Show the layout heading with animation
                layoutHeading.style.display = 'block';
                layoutHeading.classList.add('show');

                // Update the main subtitle to be more generic
                //headerSubtitle.textContent = "Please complete all required information";

                console.log(`Layout heading updated: ${content.title}`);

                // Add a small delay to ensure smooth animation
                setTimeout(() => {
                    layoutHeading.scrollIntoView({
                        behavior: 'smooth',
                        block: 'nearest'
                    });
                }, 100);
            } else {
                // Hide layout heading if no matching layout
                layoutHeading.style.display = 'none';
                layoutHeading.classList.remove('show');
                //headerSubtitle.textContent = "Complete your investment account opening process step by step";
                console.warn('Unknown layout ID:', layoutId);
            }
        }
        // ...existing code...

        // Subform Management Functions
        let promoterRowCounter = 0;

        function addPromoterRow(data = null) {
            const container = document.getElementById('promoterSubformContainer');
            const template = document.getElementById('promoterRowTemplate');

            if (!container || !template) {
                console.error('Promoter subform container or template not found');
                return;
            }

            // Clone the template
            const newRow = template.cloneNode(true);
            promoterRowCounter++;

            // Update IDs and make visible
            newRow.id = `promoterRow_${promoterRowCounter}`;
            newRow.style.display = 'block';

            // Update field names to include row index
            const fields = newRow.querySelectorAll('.promoter-field');
            fields.forEach(field => {
                const baseName = field.name.replace('[]', '');
                field.name = `${baseName}_${promoterRowCounter}`;
                field.id = `${baseName}_${promoterRowCounter}`;
            });

            // Populate with data if provided
            if (data) {
                populatePromoterRow(newRow, data);
            }

            // Add to container
            container.appendChild(newRow);

            // Only scroll if this is a user-initiated action (not initial load)
            if (!data) {
                setTimeout(() => {
                    newRow.scrollIntoView({
                        behavior: 'smooth',
                        block: 'nearest'
                    });
                }, 100);

                showAlert(`Promoter #${promoterRowCounter} added successfully!`, 'success');
            }

            console.log('Added promoter row:', promoterRowCounter);
        }

        function removePromoterRow(button) {
            const row = button.closest('.promoter-row');
            if (row) {
                row.remove();
            }
        }

        // ...existing code...

        // ...existing code...

        function populatePromoterRow(rowElement, data) {
            console.log('Populating promoter row with data:', data);

            // CORRECTED mapping of CRM field names to widget field names for subform
            const subformFieldMapping = {
                'Sr_No': 'Promoter_Sr_No',
                'Name1': 'Promoter_Name',
                'PAN': 'Promoter_PAN',
                'Residential_Registered_Addre': 'Promoter_Address',  // ← CORRECTED: This was the issue
                'DIN_and_UID_for_Directors_othe': 'Promoter_DIN_UID', // ← CORRECTED: This was the issue  
                'Relationship_with_Applicant': 'Promoter_Relationship',
                'Whether_Politically_Exposed1': 'Promoter_PEP',      // ← CORRECTED: This was the issue
                'Photograph': 'Promoter_Photograph'
            };

            // Populate fields using the correct mapping
            Object.keys(data).forEach(crmFieldName => {
                const widgetFieldName = subformFieldMapping[crmFieldName];

                if (widgetFieldName && data[crmFieldName] !== null && data[crmFieldName] !== undefined) {
                    // Find the input field in this row that contains the widget field name
                    const input = rowElement.querySelector(`[name*="${widgetFieldName}"]`);

                    if (input) {
                        console.log(`Populating ${widgetFieldName} with value:`, data[crmFieldName]);

                        if (input.type === 'file') {
                            // Handle file inputs differently - show filename if available
                            if (data[crmFieldName]) {
                                let fileInfo = input.parentNode.querySelector('.file-info');
                                if (!fileInfo) {
                                    fileInfo = document.createElement('div');
                                    fileInfo.className = 'file-info';
                                    fileInfo.style.fontSize = '12px';
                                    fileInfo.style.color = '#666';
                                    fileInfo.style.marginTop = '5px';
                                    input.parentNode.appendChild(fileInfo);
                                }
                                fileInfo.textContent = `Existing file: ${data[crmFieldName]}`;
                            }
                        } else {
                            input.value = data[crmFieldName];
                        }
                    } else {
                        console.warn(`Input field not found for ${widgetFieldName} in subform row`);
                    }
                }
            });
        }

        // ...existing code...

        function collectPromoterSubformData() {
            const subformData = [];
            const rows = document.querySelectorAll('.promoter-row:not(#promoterRowTemplate)');

            // CORRECTED Widget field name to CRM field name mapping
            const widgetToCrmMapping = {
                'Promoter_Sr_No': 'Sr_No',
                'Promoter_Name': 'Name1',
                'Promoter_PAN': 'PAN',
                'Promoter_Address': 'Residential_Registered_Addre',    // ← CORRECTED
                'Promoter_DIN_UID': 'DIN_and_UID_for_Directors_othe',  // ← CORRECTED
                'Promoter_Relationship': 'Relationship_with_Applicant',
                'Promoter_PEP': 'Whether_Politically_Exposed1',        // ← CORRECTED
                'Promoter_Photograph': 'Photograph'
            };

            rows.forEach((row, index) => {
                const rowData = {};
                const fields = row.querySelectorAll('.promoter-field');

                fields.forEach(field => {
                    const fieldBaseName = field.name.replace(/_\d+$/, ''); // Remove row suffix
                    const crmFieldName = widgetToCrmMapping[fieldBaseName];

                    if (crmFieldName && field.value && field.value.trim() !== '' && field.value !== '-None-') {
                        if (field.type === 'file' && field.files && field.files[0]) {
                            // Handle file upload
                            rowData[crmFieldName] = field.files[0].name;
                        } else {
                            rowData[crmFieldName] = field.value.trim();
                        }
                    }
                });

                // Only add row if it has data
                if (Object.keys(rowData).length > 0) {
                    // Auto-assign serial number if not provided
                    if (!rowData.Sr_No) {
                        rowData.Sr_No = (index + 1).toString();
                    }
                    subformData.push(rowData);
                }
            });

            console.log('Collected subform data:', subformData);
            return subformData;
        }

        // ...existing code...

        // ...existing code...

        // ...existing code...
        function showFormByLayout(layoutId) {
            const onboardingForm = document.getElementById('onboardingForm');
            const nonIndividualForm = document.getElementById('NonIndividualForm');
            const stepIndicators = document.getElementById('stepIndicators');
            const progressContainer = document.querySelector('.progress-container');

            // Hide both forms initially
            if (onboardingForm) {
                onboardingForm.style.display = 'none';
                onboardingForm.parentElement.style.display = 'none';
            }
            if (nonIndividualForm) {
                nonIndividualForm.style.display = 'none';
                nonIndividualForm.parentElement.style.display = 'none';
            }

            // UPDATE: Add layout heading update
            updateLayoutHeading(layoutId);

            if (layoutId === LAYOUT_IDS.NON_INDIVIDUAL) {
                console.log('Showing Non-Individual form');

                // Show Non-Individual form
                if (nonIndividualForm) {
                    nonIndividualForm.style.display = 'block';
                    nonIndividualForm.parentElement.style.display = 'block';
                }

                // Hide step indicators for Non-Individual (simpler form)
                if (stepIndicators) stepIndicators.style.display = 'none';
                if (progressContainer) progressContainer.style.display = 'none';

                // Update config for Non-Individual
                WIDGET_CONFIG.totalSteps = 1;
                WIDGET_CONFIG.currentStep = 1;

                showAlert('Non-Individual entity form loaded', 'info');

            } else {
                console.log('Showing Individual/NRI form');

                // Show Individual/NRI form
                if (onboardingForm) {
                    onboardingForm.style.display = 'block';
                    onboardingForm.parentElement.style.display = 'block';
                }

                // Show step indicators for Individual/NRI (multi-step form)
                if (stepIndicators) stepIndicators.style.display = 'flex';
                if (progressContainer) progressContainer.style.display = 'block';

                // Restore original config for Individual/NRI
                WIDGET_CONFIG.totalSteps = 4;
                WIDGET_CONFIG.currentStep = 1;

                // Show first step
                goToStep(1);

                showAlert('Individual/NRI form loaded', 'info');
            }

            // Update buttons based on layout
            updateButtonsForLayout(layoutId);
        }

        function updateButtonsForLayout(layoutId) {
            const prevBtn = document.getElementById('prevBtn');
            const nextBtn = document.getElementById('nextBtn');
            const submitBtn = document.getElementById('submitBtn');
            const saveDraftBtn = document.getElementById('saveDraftBtn');

            if (layoutId === LAYOUT_IDS.NON_INDIVIDUAL) {
                // Simple buttons for Non-Individual
                if (prevBtn) prevBtn.style.display = 'none';
                if (nextBtn) nextBtn.style.display = 'none';
                if (submitBtn) {
                    submitBtn.style.display = 'inline-block';
                    submitBtn.classList.remove('hidden');
                }
                if (saveDraftBtn) {
                    saveDraftBtn.style.display = 'inline-block';
                    saveDraftBtn.classList.remove('hidden');
                }
            } else {
                // Multi-step buttons for Individual/NRI - use existing updateButtons logic
                updateButtons();
            }
        }
        // Initialize Zoho SDK properly
        function initializeZohoSDK() {
            console.log('Starting Zoho SDK initialization...');

            // Check if ZOHO object exists
            if (typeof ZOHO === 'undefined') {
                console.error('ZOHO SDK not loaded');
                initializeWidgetWithoutZoho();
                return;
            }

            // Set up PageLoad event handler FIRST
            ZOHO.embeddedApp.on("PageLoad", function (data) {
                console.log("Zoho PageLoad event received:", data);

                // Extract Entity ID from the PageLoad event
                if (data && data.EntityId) {
                    let entityId;

                    // Handle both array and single value cases
                    if (Array.isArray(data.EntityId)) {
                        entityId = data.EntityId[0];
                    } else {
                        entityId = data.EntityId;
                    }

                    // Validate the EntityId is a valid positive number
                    if (entityId && !isNaN(Number(entityId)) && Number(entityId) > 0) {
                        WIDGET_CONFIG.recordId = entityId.toString();
                        console.log('Valid Record ID from PageLoad event:', entityId);
                    } else {
                        console.log('Invalid EntityId from PageLoad event:', entityId);
                        WIDGET_CONFIG.recordId = null;
                    }
                } else {
                    console.log('No EntityId in PageLoad event data');
                    WIDGET_CONFIG.recordId = null;
                }

                // Resize widget
                ZOHO.CRM.UI.Resize({ height: "100%", width: "100%" }).then(function (resizeData) {
                    console.log('Widget resized:', resizeData);
                }).catch(function (error) {
                    console.log('Resize error:', error);
                });

                WIDGET_CONFIG.isZohoInitialized = true;
                initializeWidget();
            });

            // Initialize the embedded app
            ZOHO.embeddedApp.init()
                .then(function (initData) {
                    console.log("Zoho CRM API initialized successfully:", initData);
                    WIDGET_CONFIG.isZohoInitialized = true;

                    // Try to get record ID from init data as backup
                    if (initData && initData.EntityId && !WIDGET_CONFIG.recordId) {
                        let entityId;
                        if (Array.isArray(initData.EntityId)) {
                            entityId = initData.EntityId[0];
                        } else {
                            entityId = initData.EntityId;
                        }

                        if (entityId && !isNaN(Number(entityId)) && Number(entityId) > 0) {
                            WIDGET_CONFIG.recordId = entityId.toString();
                            console.log('Record ID from init data:', entityId);
                        }
                    }

                    // If PageLoad event hasn't fired within 2 seconds, initialize anyway
                    setTimeout(() => {
                        if (!WIDGET_CONFIG.isZohoInitialized) {
                            console.log('PageLoad event timeout, initializing widget...');
                            initializeWidget();
                        }
                    }, 2000);
                })
                .catch(function (error) {
                    console.error("Error initializing Zoho CRM API:", error);
                    initializeWidgetWithoutZoho();
                });
        }

        // Initialize widget without Zoho integration
        function initializeWidgetWithoutZoho() {
            console.log('Initializing widget without Zoho integration');
            showAlert('Widget loaded in standalone mode. Zoho integration unavailable.', 'warning');
            updateProgressBar();
            showLoading(false);
        }

        // Main widget initialization
        // Replace your existing initializeWidget function (around line 2900)
        async function initializeWidget() {
            try {
                showLoading(true);
                console.log('Initializing widget...');
                console.log('Current record ID:', WIDGET_CONFIG.recordId);
                console.log('Zoho initialized:', WIDGET_CONFIG.isZohoInitialized);

                // FIRST: Always unlock form for new sessions
                unlockForm();
                console.log('Form unlocked during initialization');

                // Get record ID if not already available
                if (!WIDGET_CONFIG.recordId && WIDGET_CONFIG.isZohoInitialized) {
                    console.log('No record ID yet, trying to get it...');
                    const recordId = await getCurrentRecordId();
                    if (recordId) {
                        WIDGET_CONFIG.recordId = recordId;
                        console.log('Got record ID:', recordId);
                    }
                }

                // DETECT LAYOUT AND SHOW APPROPRIATE FORM
                const layoutId = await detectAndSetLayout(WIDGET_CONFIG.recordId);
                console.log('Using layout:', layoutId);

                // Ensure heading is updated even if showFormByLayout was already called
                updateLayoutHeading(layoutId);
                if (WIDGET_CONFIG.recordId && WIDGET_CONFIG.isZohoInitialized) {
                    WIDGET_CONFIG.isEditMode = true;
                    console.log('Loading existing record with ID:', WIDGET_CONFIG.recordId);
                    await loadExistingRecord(WIDGET_CONFIG.recordId);
                } else {
                    console.log('No record ID found, starting with empty form');
                    updateStatusBadge('draft');
                    WIDGET_CONFIG.recordStatus = 'draft';

                    setTimeout(() => {
                        unlockForm();
                        updateButtonsForLayout(layoutId);
                        console.log('New record setup completed');
                    }, 100);

                    if (!WIDGET_CONFIG.isZohoInitialized) {
                        showAlert('Zoho integration not available. You can still use the form, but data won\'t be saved to CRM.', 'info');
                    } else {
                        showAlert('Starting with a new record. Fill the form and save to create a new record.', 'info');
                    }
                }

                // Initialize subforms ONLY for Non-Individual layout and ONLY after form is loaded
                if (layoutId === LAYOUT_IDS.NON_INDIVIDUAL) {
                    // FIXED: Initialize subforms without scrolling and only if no existing data
                    setTimeout(() => {
                        initializeSubformsQuietly();
                    }, 200);
                }

                // Update progress bar only for Individual/NRI layout
                if (layoutId === LAYOUT_IDS.INDIVIDUAL_NRI) {
                    updateProgressBar();
                    updateButtons();
                }

                // ENSURE PAGE STAYS AT TOP
                setTimeout(() => {
                    window.scrollTo({ top: 0, behavior: 'auto' });
                    const formContainer = document.querySelector('.form-container');
                    if (formContainer) {
                        formContainer.scrollTop = 0;
                    }
                }, 300);

                showLoading(false);

            } catch (error) {
                console.error('Error initializing widget:', error);
                showAlert('Error loading data: ' + error.message, 'error');
                // Ensure form is unlocked even on error and show default layout
                unlockForm();
                showFormByLayout(LAYOUT_IDS.INDIVIDUAL_NRI);
                updateButtonsForLayout(LAYOUT_IDS.INDIVIDUAL_NRI);
                showLoading(false);
            }
        }
        // Initialize subforms without causing page scroll
        function initializeSubformsQuietly() {
            try {
                // Check if we already have promoter rows (from loaded data)
                const existingPromoterRows = document.querySelectorAll('#promoterSubformContainer .promoter-row:not(#promoterRowTemplate)');

                if (existingPromoterRows.length === 0) {
                    console.log('Adding default promoter row');
                    // Temporarily disable scrolling
                    const originalScrollBehavior = document.documentElement.style.scrollBehavior;
                    document.documentElement.style.scrollBehavior = 'auto';

                    addPromoterRowQuietly();

                    // Restore scroll behavior
                    document.documentElement.style.scrollBehavior = originalScrollBehavior;
                }

                // Check if we already have UBO rows (from loaded data)
                const existingUBORows = document.querySelectorAll('#uboSubformContainer .promoter-row:not(#uboRowTemplate)');

                if (existingUBORows.length === 0) {
                    console.log('Adding default UBO row');
                    // Temporarily disable scrolling
                    const originalScrollBehavior = document.documentElement.style.scrollBehavior;
                    document.documentElement.style.scrollBehavior = 'auto';

                    addUBORowQuietly();

                    // Restore scroll behavior
                    document.documentElement.style.scrollBehavior = originalScrollBehavior;
                }

                console.log('Subforms initialized quietly');
            } catch (error) {
                console.error('Error initializing subforms:', error);
            }
        }
        // Add promoter row without scrolling or alerts
        function addPromoterRowQuietly(data = null) {
            const container = document.getElementById('promoterSubformContainer');
            const template = document.getElementById('promoterRowTemplate');

            if (!container || !template) {
                console.error('Promoter subform container or template not found');
                return;
            }

            // Clone the template
            const newRow = template.cloneNode(true);
            promoterRowCounter++;

            // Update IDs and make visible
            newRow.id = `promoterRow_${promoterRowCounter}`;
            newRow.style.display = 'block';

            // Update field names to include row index
            const fields = newRow.querySelectorAll('.promoter-field');
            fields.forEach(field => {
                const baseName = field.name.replace('[]', '');
                field.name = `${baseName}_${promoterRowCounter}`;
                field.id = `${baseName}_${promoterRowCounter}`;
            });

            // Populate with data if provided
            if (data) {
                populatePromoterRow(newRow, data);
            }

            // Add to container without any scrolling or alerts
            container.appendChild(newRow);

            console.log('Added promoter row quietly:', promoterRowCounter);
        }

        // Add UBO row without scrolling or alerts
        function addUBORowQuietly(data = null) {
            const container = document.getElementById('uboSubformContainer');
            const template = document.getElementById('uboRowTemplate');

            if (!container || !template) {
                console.error('UBO subform container or template not found');
                return;
            }

            // Clone the template
            const newRow = template.cloneNode(true);
            uboRowCounter++;

            // Update IDs and make visible
            newRow.id = `uboRow_${uboRowCounter}`;
            newRow.style.display = 'block';

            // Update header title with counter
            const header = newRow.querySelector('.promoter-row-header h4');
            if (header) {
                header.textContent = `UBO Details #${uboRowCounter}`;
            }

            // Update field names to include row index
            const fields = newRow.querySelectorAll('.ubo-field');
            fields.forEach(field => {
                const baseName = field.name.replace('[]', '');
                field.name = `${baseName}_${uboRowCounter}`;
                field.id = `${baseName}_${uboRowCounter}`;
            });

            // Populate with data if provided
            if (data) {
                populateUBORow(newRow, data);
            }

            // Add to container without any scrolling or alerts
            container.appendChild(newRow);

            console.log('Added UBO row quietly:', uboRowCounter);
        }

        // Load existing record with better error handling
        async function loadExistingRecord(recordId) {
            try {
                console.log('Loading record with ID:', recordId);

                if (!WIDGET_CONFIG.isZohoInitialized) {
                    throw new Error('Zoho SDK not initialized');
                }

                // Fetch record from Zoho CRM
                const response = await ZOHO.CRM.API.getRecord({
                    Entity: "Onboarding",
                    RecordID: recordId
                });

                console.log('API Response:', response);

                if (response && response.data && response.data.length > 0) {
                    const recordData = response.data[0];
                    WIDGET_CONFIG.currentRecordData = recordData;

                    // Populate form with existing data
                    populateForm(recordData);

                    // Update status badge
                    const status = recordData.Onboarding_Status || 'Draft';
                    updateStatusBadge(status.toLowerCase());
                    WIDGET_CONFIG.recordStatus = status;

                    // IMPORTANT: Check status and lock/unlock accordingly
                    const finalStatuses = ['Submitted', 'Approved', 'Account Activated', 'Onbaording Completed'];

                    if (finalStatuses.includes(status)) {
                        console.log('Record has final status, locking form:', status);
                        lockForm();
                    } else {
                        console.log('Record has editable status, keeping form unlocked:', status);
                        unlockForm();
                    }

                    showAlert('Record data loaded successfully!', 'success');
                } else {
                    // No record data found, treat as new record
                    console.log('No existing record data found');
                    unlockForm();
                    updateStatusBadge('draft');
                    WIDGET_CONFIG.recordStatus = 'draft';
                    showAlert('No existing data found for this record. You can now fill the form.', 'info');
                }
            } catch (error) {
                console.error('Error loading record:', error);
                // Always unlock on error
                unlockForm();
                updateStatusBadge('draft');
                WIDGET_CONFIG.recordStatus = 'draft';

                // Provide specific error messages
                if (error.message && error.message.includes('INVALID_MODULE')) {
                    showAlert('Error: Invalid module name "Onboarding". Please check your Zoho CRM module configuration.', 'error');
                } else if (error.message && error.message.includes('RECORD_NOT_FOUND')) {
                    showAlert('Record not found. Starting with a new form.', 'warning');
                } else if (error.message && error.message.includes('Parentwindow reference not found')) {
                    showAlert('Unable to connect to Zoho CRM. Please ensure the widget is running within Zoho CRM.', 'error');
                } else if (error.message && error.message.includes('not initialized')) {
                    showAlert('Zoho integration not available. Running in offline mode.', 'warning');
                } else {
                    showAlert('Error loading record: ' + (error.message || 'Unknown error'), 'error');
                }
            }
        }

        // ...existing code...

        // ...existing code...

        // Replace the populateForm function with this enhanced version that handles layout-specific mappings:

        function populateForm(recordData) {
            try {
                console.log('Populating form with data:', recordData);
                console.log('Current layout ID:', currentLayoutId);

                // Determine which form to populate based on current layout
                const formId = (currentLayoutId === LAYOUT_IDS.NON_INDIVIDUAL) ? 'NonIndividualForm' : 'onboardingForm';
                const activeForm = document.getElementById(formId);

                if (!activeForm) {
                    console.error('Active form not found:', formId);
                    return;
                }

                // Enhanced layout-specific field mappings
                let layoutFieldMapping = {};

                if (currentLayoutId === LAYOUT_IDS.NON_INDIVIDUAL) {
                    // Non-Individual layout mappings (Layout 2)
                    layoutFieldMapping = {
                        'Name': 'Name',
                        'Place_of_Incorporation': 'Place_of_Incorporation',
                        'CKYC_No': 'CKYC_No',
                        'PAN': 'PAN',
                        'TAN': 'TAN',
                        'Status_Select_One': 'Status_Select_One',
                        'Date_of_Birth': 'Date_of_Birth',
                        'Date_of_Commencement_of_Business': 'Date_of_Commencement_of_Business',
                        'GST_No': 'GST_No',
                        'Registration_No_e_g_CIN': 'Registration_No_e_g_CIN',
                        'Sales_Type': 'Sales_Type',

                        // ADDRESS DETAILS
                        'Address_for_Correspondence_Local_Address_in_case': 'Address_for_Correspondence_Local_Address_in_case',
                        'Pincode': 'FH_Pincode',
                        'Country': 'FH_Country',
                        'Mobile': 'FH_Mobile',
                        'Registered_Address': 'Registered_Address',
                        'Pincode_AD': 'Pincode_AD',
                        'Country_PA': 'Country_AD',
                        'Mobile_AD': 'Mobile_AD',
                        'City_Town_Village': 'FH_City_Town_Village',
                        'State': 'FH_State',
                        'Telephone': 'FH_Telephone',
                        'Email_ID1': 'Email_ID_AD',
                        'Specify_proof_of_address_submitted_for_Permanent_A': 'Specify_proof_of_address_submitted_for_Permanent_A',
                        'City_Town_Village_PA': 'City_Town_Village_AD',
                        'State_AD': 'State_AD',
                        'Telephone_AD': 'Telephone_AD',
                        'Specify_the_Proof_of_Address_for_Correspondence_AD': 'Specify_Proof_of_Address_for_Correspondence_AD',

                        // OTHER DETAILS
                        'Net_worth_Not_older_than_1_year1': 'Net_worth_Not_older_than_1_year_NI',
                        'Income_Range_per_annum': 'FH_Income_Range_per_annum_NI',
                        'Type_of_Company_Firm_NI': 'Type_of_Company_Firm_NI',
                        'Investment_Experience_in_Listed_Equities_if_any': 'Investment_Experience_in_Listed_Equities_NI',
                        'As_on_Date': 'FH_As_on_Date_NI',
                        'Nature_of_Business_Occupation_NI': 'Nature_of_Business_Occupation_NI',
                        'Sources_of_Funds': 'FH_Sources_of_Funds_NI',
                        'DP_ID': 'FH_Any_other_information_NI',

                        // BANK ACCOUNT DETAILS
                        'Bank_Name': 'FH_Bank_Name',
                        'IFSC_Code': 'FH_IFSC_Code',
                        'Account_No': 'FH_Account_No',
                        'Branch': 'FH_Branch',
                        'Account_Type': 'FH_Account_Type',

                        // INVESTMENT PROFILE
                        'Risk_Tolerance_for_Investment': 'Risk_Tolerance_for_Investment',
                        'Indicative_Time_Period_of_Investments': 'Indicative_Time_Period_of_Investments',
                        'Overall_Investment_Goals': 'FH_Overall_Investment_Goals',
                        'Preferred_Asset_Class': 'Preferred_Asset_Class',
                        'Investment_Experience_in_Equity_Markets': 'Investment_Experience_in_Equity_Markets',
                        'Systematic_Transfer_Plan': 'Systematic_Transfer_Plan',
                        'Indicative_of_Total_Investment_Portfolio_propose': 'Indicative_Total_Investment_Portfolio_Propose',
                        'Type_of_PMS_Account': 'Type_of_PMS_Account',

                        // CLIENT INTRODUCED BY
                        'Client_Name': 'Client_Name',
                        'Address': 'Address',

                        // APPLICANTS DECLARATION
                        'Photo_of_First_Holder': 'Photo_of_First_Holder',
                        'First_Holder_Date': 'firstHolderDateNI',
                        'First_Holder_Place': 'firstHolderPlaceNI',
                        'Photo_of_Third_Holder': 'Photo_of_Third_Holder',
                        'Third_Holder_Date': 'thirdHolderDateNI',
                        'Third_Holder_Place': 'thirdHolderPlaceNI',
                        'Photo_of_Second_Holder': 'Photo_of_Second_Holder',
                        'Second_Holder_Date': 'secondHolderDateNI',
                        'Second_Holder_Place': 'secondHolderPlaceNI',

                        // PROMOTER DETAILS
                        'Name_of_Applicant': 'Promoter_Name_of_Applicant',
                        'PAN_Card': 'Promoter_FH_PAN_Card',

                        // STATUS
                        'Onboarding_Status': 'Onboarding_Status',


                    };
                } else {
                    // Individual/NRI layout mappings (Layout 1)
                    layoutFieldMapping = {
                        'Name': 'nameOfApplicant',  // This is the key fix for Layout 1
                        'Father_s_Spouse_s_name': 'fh_fatherSpouseName',
                        'Mother_s_Name': 'fh_motherName',
                        'FH_Date_of_Birth': 'fh_dateOfBirth',
                        'Marital_Status': 'fh_maritalStatus',
                        'Secondary_Email': 'secondaryEmail',
                        'Gender': 'fh_gender',
                        'Citizenship': 'fh_citizenship',
                        'Email': 'email',
                        'FH_Type_of_Account': 'fh_typeOfAccount',
                        'Residential_Status': 'fh_residentialStatus',
                        'PAN': 'fh_pan',
                        'GST_No': 'fh_gstNo',
                        'UID_Aadhaar_No': 'fh_uidAadhaar',
                        'CKYC_No': 'fh_ckyc',
                        'TAN': 'fh_tan',
                        'Email_Opt_Out': 'emailOptOut',
                        'Exchange_Rate': 'exchangeRate',
                        'Currency': 'currency',
                        'Investor_Distributor_Type': 'investorDistributorType',
                        'Sales_Type': 'salesType',

                        // INCOME DETAILS - First/Sole Holder
                        'Net_worth_Not_older_than_1_year': 'fh_netWorth',
                        'As_on_Date': 'fh_asOnDate',
                        'Income_Range_per_annum': 'fh_incomeRange',
                        'Occupation': 'fh_occupation',
                        'Please_select_Status': 'fh_pleaseSelectStatus',
                        'Sources_of_Funds': 'fh_sourcesOfFunds',
                        'Nature_of_Business_Type_of_Company_Firm_Prof': 'fh_natureOfBusinessProfession',
                        'Overall_Investment_Goals': 'fh_overallInvestmentGoals',
                        'Type_of_Company_Firm': 'fh_typeOfCompanyFirm',
                        'Please_select_Status2': 'fh_pleaseSelectStatus2',

                        // CONTACT DETAILS - First/Sole Holder
                        'Mobile_No': 'fh_mobileNo',
                        'Landline_No': 'fh_landlineNo',
                        'Email_ID': 'fh_emailId',

                        // PROOF OF IDENTITY - First/Sole Holder
                        'Passport_Number': 'fh_passportNumber',
                        'Passport_Expiry_Date': 'fh_passportExpiryDate',
                        'PAN_Card': 'fh_panCard',
                        //'Preferred_Asset_Class_Other': 'preferredAssetClassOther',
                        'Voter_ID': 'fh_voterID',
                        'UID_Aadhaar': 'fh_uidAadhaarProof',
                        'Driving_License': 'fh_drivingLicense',
                        'Driving_License_Expiry_Date': 'fh_drivingLicenseExpiryDate',

                        // PROOF OF ADDRESS - First/Sole Holder
                        'Address_Type': 'fh_addressType',
                        'Address_for_Correspondence_Local_Address_in_case': 'fh_addressCorrespondence',
                        'Pincode': 'fh_pincode',
                        'Country': 'fh_country',
                        'Mobile': 'fh_mobile',
                        //'Permanent_address': 'fh_permanentAddress',
                        'Pincode_PA': 'fh_pincodePA',
                        'Country_PA': 'fh_countryPA',
                        'Specify_proof_of_address_submitted_for_Permanent_A': 'fh_proofOfAddressPermanent',
                        'Proof_of_Address': 'fh_proofOfAddress',
                        'City_Town_Village': 'fh_cityTownVillage',
                        'State': 'fh_state',
                        'Telephone': 'fh_telephone',
                        'Email_ID1': 'fh_emailIdAD',
                        'City_Town_Village_PA': 'fh_cityTownVillagePA',
                        'State_PA': 'fh_statePA',
                        'Telephone_PA': 'fh_telephonePA',
                        'Mobile_PA': 'fh_mobilePA',

                        // Tax Residency in Jurisdiction(s) Outside India - F
                        'Tax_Residency_in_Jurisdiction_s_Outside_India': 'taxResidencyInJurisdictionOutsideIndia',
                        'Country_of_Birth': 'countryOfBirth',
                        'Tax_Identification_Number_or_Equivalent': 'taxIdentificationNumberOrEquivalent',
                        'Place_City_of_Birth': 'placeCityOfBirth',
                        'Country_of_Jurisdiction_of_Residence': 'countryOfJurisdictionOfResidence',

                        // BANK ACCOUNT DETAILS - First/Sole Holder
                        'Bank_Name': 'bankName',
                        'IFSC_Code': 'ifscCode',
                        'Account_No': 'accountNo',
                        'Branch': 'branch',
                        'Account_Type': 'accountType',

                        // DEPOSITORY ACCOUNT DETAILS - First/Sole Holder
                        'Name_of_the_DP_Depository_Participant': 'nameOfTheDPDepositoryParticipant',
                        'Client_ID': 'clientID',
                        'DP_ID': 'dpID',

                        // CONTACT PERSONS DETAILS - First /Sole Holder
                        'Name1': 'name1',
                        'Mobile_No1': 'mobileNo1',
                        'Email_ID_for_Receiving_All_Correspondence': 'emailIdForCorrespondence',

                        // SECOND HOLDER DETAILS
                        'Name_of_Applicant1': 'sh_nameOfApplicant',
                        'Father_s_Spouse_s_name1': 'sh_fatherSpouseName',
                        'Mother_s_Name1': 'sh_motherName',
                        'Relationship_with_Minor': 'sh_relationshipWithMinor',
                        'Date_of_Birth1': 'sh_dateOfBirth',
                        'Marital_Status1': 'sh_maritalStatus',
                        'Gender1': 'sh_gender',
                        'Citizenship1': 'sh_citizenship',
                        'PAN1': 'sh_pan',
                        'GST_No1': 'sh_gstNo',
                        'UID_Aadhaar_No1': 'sh_uidAadhaar',
                        'CKYC_No1': 'sh_ckycNo',
                        'TAN1': 'sh_tan',
                        'Account_Type1': 'sh_accountType',
                        'Residential_Status1': 'sh_residentialStatus',

                        // INCOME DETAILS - Second Holder
                        'Net_worth_Not_older_than_1_year1': 'Net_worth_Not_older_than_1_year1',
                        'As_on_Date1': 'As_on_Date1',
                        'Income_Range_per_annum1': 'Income_Range_per_annum1',
                        'Occupation1': 'Occupation1',
                        'Please_select_Status1': 'Please_select_Status1',
                        'Sources_of_Funds1': 'Sources_of_Funds1',
                        'SH_Nature_of_Business_Profession': 'SH_Nature_of_Business_Profession',
                        'Overall_Investment_Goals1': 'Overall_Investment_Goals1',
                        'SH_Type_of_Company_Firm': 'SH_Type_of_Company_Firm',

                        // CONTACT DETAILS - Second Holder
                        'Mobile_no2': 'sh_mobileNo',
                        'Landline_No1': 'sh_landlineNo',
                        'Email_ID2': 'sh_emailId',

                        // PROOF OF IDENTITY - Second Holder
                        'Passport_Number1': 'Passport_Number1',
                        'Passport_Expiry_Date1': 'Passport_Expiry_Date1',
                        'PAN_Card1': 'PAN_Card1',
                        'Voter_ID1': 'Voter_ID1',
                        'UID_Aadhaar1': 'UID_Aadhaar1',
                        'Driving_License1': 'Driving_License1',
                        'Driving_License_Expiry_Date1': 'Driving_License_Expiry_Date1',

                        // PROOF OF ADDRESS - Second Holder
                        'Address_Type1': 'Address_Type1',
                        'Address_for_Correspondence_Local_Address_in_case1': 'Address_for_Correspondence_Local_Address_in_case1',
                        'Pincode1': 'Pincode1',
                        'Country1': 'Country1',
                        'Mobile1': 'Mobile1',
                        'Permanent_address1': 'Permanent_address1',
                        'SH_City_Town_Village_for_PA': 'SH_City_Town_Village_for_PA',
                        'SH_Country_PA': 'SH_Country_PA',
                        'SH_Mobile_PA': 'SH_Mobile_PA',
                        'Proof_of_Address1': 'Proof_of_Address1',
                        'City_Town_Village1': 'City_Town_Village1',
                        'State1': 'State1',
                        'Telephone1': 'Telephone1',
                        'Email_ID3': 'Email_ID3',
                        'Specify_proof_of_address_submitted_for_Permanent_A1': 'Specify_proof_of_address_submitted_for_Permanent_A1',
                        'SH_Pincode_for_PA': 'SH_Pincode_for_PA',
                        'SH_State_PA': 'SH_State_PA',
                        'SH_Telephone_PA': 'SH_Telephone_PA',

                        // Tax Residency in Jurisdiction(s) Outside India - S
                        'Tax_Residency_in_Jurisdiction_s_Outside_India1': 'Tax_Residency_in_Jurisdiction_s_Outside_India1',
                        'Country_of_Birth1': 'Country_of_Birth1',
                        'Tax_Identification_Number_or_Equivalent1': 'Tax_Identification_Number_or_Equivalent1',
                        'Place_City_of_Birth1': 'Place_City_of_Birth1',
                        'Country_of_Jurisdiction_of_Residence1': 'Country_of_Jurisdiction_of_Residence1',

                        // THIRD HOLDER DETAILS
                        'Name_of_Applicant2': 'th_nameOfApplicant',
                        'Father_s_Spouse_s_name2': 'th_fatherSpouseName',
                        'Mother_s_Name2': 'th_motherName',
                        'Date_of_Birth2': 'th_dateOfBirth',
                        'TH_Marital_Status': 'th_maritalStatus',
                        'Registered_Address_2': 'th_gender',
                        'TH_Citizenship': 'th_citizenship',
                        'PAN2': 'th_pan',
                        'GST_No2': 'th_gstNo',
                        'UID_Aadhaar_No2': 'th_uidAadhaar',
                        'CKYC_No2': 'th_ckycNo',
                        'TAN2': 'th_tan',
                        'Residential_Status2': 'th_residentialStatus',

                        // INCOME DETAILS - Third Holder
                        'Net_worth_Not_older_than_1_year2': 'Net_worth_Not_older_than_1_year2',
                        'As_on_Date2': 'As_on_Date2',
                        'Income_Range_per_annum2': 'Income_Range_per_annum2',
                        'TH_Occupation': 'TH_Occupation',
                        'TH_Please_select_Status': 'TH_Please_select_Status',
                        'TH_Sources_of_Funds': 'TH_Sources_of_Funds',
                        'TH_Nature_of_Busniess_Profession': 'TH_Nature_of_Busniess_Profession',
                        'TH_Overall_Investment_Goals': 'TH_Overall_Investment_Goals',
                        'TH_Type_of_Company_Firm': 'TH_Type_of_Company_Firm',

                        // CONTACT DETAILS - Third Holder
                        'TH_Mobile_No': 'th_mobileNo',
                        'TH_Landline_No': 'th_landlineNo',
                        'TH_Email_ID': 'th_emailId',

                        // PROOF OF IDENTITY - Third Holder
                        'TH_A_Passport_Number': 'TH_A_Passport_Number',
                        'TH_B_Voter_ID': 'TH_B_Voter_ID',
                        'TH_UID_Aadhaar': 'TH_UID_Aadhaar',
                        'TH_Driving_License': 'TH_Driving_License',
                        'TH_Driving_License_Expiry_Date': 'TH_Driving_License_Expiry_Date',
                        'TH_Passport_Expiry_Date': 'TH_Passport_Expiry_Date',
                        'TH_PAN_Card': 'TH_PAN_Card',

                        // PROOF OF ADDRESS - Third Holder
                        'TH_Address_Type': 'TH_Address_Type',
                        'TH_Address_for_Correspondence_Local_Address_in': 'TH_Address_for_Correspondence_Local_Address_in',
                        'TH_Pincode': 'TH_Pincode',
                        'TH_Country': 'TH_Country',
                        'TH_Email_ID_for_Proof_of_Address': 'TH_Email_ID_for_Proof_of_Address',
                        'TH_City_Town_Village_PA': 'TH_City_Town_Village_PA',
                        'TH_Pincode_PA': 'TH_Pincode_PA',
                        'TH_Mobile_PA': 'TH_Mobile_PA',
                        'THSpecify_proof_of_address_submitted_for_Permanent': 'THSpecify_proof_of_address_submitted_for_Permanent',
                        'TH_Proof_of_Address': 'TH_Proof_of_Address',
                        'TH_City_Town_Village': 'TH_City_Town_Village',
                        'TH_State': 'TH_State',
                        'TH_Telephone_1': 'TH_Telephone',
                        'TH_Mobile1': 'TH_Mobile',
                        'TH_Permanent_Address': 'TH_Permanent_Address',
                        'TH_State_PA': 'TH_State_PA',
                        'TH_Country_PA': 'TH_Country_PA',
                        'TH_Telephone_PA': 'TH_Telephone_PA',

                        // Tax Residency in Jurisdiction(s) Outside India - T
                        'TH_Tax_Residency_in_Jurisdiction_s_Outside_India': 'TH_Tax_Residency_in_Jurisdiction_s_Outside_India',
                        'TH_Country_of_Birth': 'TH_Country_of_Birth',
                        'TH_Tax_Identification_Number_or_Equivalent': 'TH_Tax_Identification_Number_or_Equivalent',
                        'TH_Place_City_of_Birth': 'TH_Place_City_of_Birth',
                        'TH_Country_of_Jurisdiction_of_Residence': 'TH_Country_of_Jurisdiction_of_Residence',

                        // INVESTMENT PROFILE AND OBJECTIVES OF THE CLIENT
                        'Risk_Tolerance': 'riskTolerance',
                        'Investment_Experience_in_Equity_Markets': 'investmentExperience',
                        'Overall_Investment_Goals_for_Investment': 'overallInvestmentGoalsForInvestment',
                        'Preferred_Asset_Class': 'preferredAssetClass',
                        'Indicative_Time_Period_of_Investments': 'indicativeTimePeriodOfInvestments',
                        'Systematic_Transfer_Plan': 'systematicTransferPlan',
                        'Systematic_Transfer_PlanDate': 'systematicTransferPlanDate',
                        'Indicative_of_Total_Investment_Portfolio_propose': 'indicativeTotalInvestmentPortfolioPropose',

                        // Client Introduced by
                        'Client_Name': 'clientName',
                        'Address': 'clientAddress',

                        // APPLICANT DECLARATION
                        'Photo_of_First_Holder': 'photoFirstHolder',
                        'First_Holder_Date': 'firstHolderDate',
                        'First_Holder_Place': 'firstHolderPlace',
                        'Photo_of_Second_Holder': 'photoSecondHolder',
                        'Second_Holder_Date': 'secondHolderDate',
                        'Second_Holder_Place': 'secondHolderPlace',
                        'Photo_of_Third_Holder': 'photoThirdHolder',
                        'Third_Holder_Date': 'thirdHolderDate',
                        'Third_Holder_Place': 'thirdHolderPlace',

                        // STATUS
                        'Onboarding_Status': 'onboardingStatus',
                        //'Opportunity': 'opportunity'
                    };
                }

                // Use layout-specific mappings ONLY
                Object.keys(recordData).forEach(crmField => {
                    if (crmField === 'Details_of_Promoters_Su' || crmField === 'Details_of_UBO') {
                        return; // Skip subforms, handle separately
                    }

                    // Use layout-specific mapping ONLY
                    const widgetFieldId = layoutFieldMapping[crmField];

                    if (widgetFieldId && recordData[crmField] !== undefined && recordData[crmField] !== null) {
                        const fieldElement = activeForm.querySelector(`#${widgetFieldId}`);

                        if (fieldElement) {
                            const fieldValue = recordData[crmField];

                            try {
                                // Handle different field types
                                if (fieldElement.type === 'checkbox') {
                                    fieldElement.checked = fieldValue === true || fieldValue === 'true' || fieldValue === 'Yes';
                                } else if (fieldElement.type === 'date') {
                                    if (fieldValue) {
                                        const dateValue = new Date(fieldValue);
                                        if (!isNaN(dateValue.getTime())) {
                                            fieldElement.value = dateValue.toISOString().split('T')[0];
                                        }
                                    }
                                } else if (fieldElement.type === 'number') {
                                    if (fieldValue && !isNaN(fieldValue)) {
                                        fieldElement.value = fieldValue;
                                    }
                                } else if (fieldElement.tagName === 'SELECT') {
                                    // Enhanced select handling
                                    const options = fieldElement.querySelectorAll('option');
                                    let optionFound = false;

                                    for (let option of options) {
                                        if (option.value === fieldValue) {
                                            fieldElement.value = fieldValue;
                                            optionFound = true;
                                            break;
                                        }
                                    }

                                    if (!optionFound && fieldValue) {
                                        console.warn(`Option "${fieldValue}" not found for select field ${widgetFieldId}`);
                                    }
                                } else if (fieldElement.tagName === 'TEXTAREA') {
                                    fieldElement.value = fieldValue || '';
                                } else {
                                    // Regular input fields
                                    fieldElement.value = fieldValue || '';
                                }

                                console.log(`✓ Populated field ${widgetFieldId} (${crmField}) with value:`, fieldValue);

                                // Visual feedback for populated fields
                                fieldElement.style.backgroundColor = '#f0f7ff';
                                setTimeout(() => {
                                    fieldElement.style.backgroundColor = '';
                                }, 1000);

                            } catch (fieldError) {
                                console.error(`Error populating field ${widgetFieldId}:`, fieldError);
                            }
                        } else {
                            console.warn(`Field element not found for ${crmField} -> ${widgetFieldId} in form ${formId}`);
                        }
                    } else if (recordData[crmField] !== undefined && recordData[crmField] !== null && crmField !== 'id' && crmField !== 'Created_Time' && crmField !== 'Modified_Time') {
                        console.warn(`No mapping found for CRM field: ${crmField} = ${recordData[crmField]}`);
                    }
                });

                // Handle promoter subform data
                if (recordData.Details_of_Promoters_Su && Array.isArray(recordData.Details_of_Promoters_Su)) {
                    console.log('Populating promoter subform data:', recordData.Details_of_Promoters_Su);

                    // Clear existing promoter rows first
                    const existingPromoterRows = document.querySelectorAll('#promoterSubformContainer .promoter-row:not(#promoterRowTemplate)');
                    existingPromoterRows.forEach(row => row.remove());

                    // Reset counter
                    promoterRowCounter = 0;

                    // Add rows for each promoter subform record
                    recordData.Details_of_Promoters_Su.forEach(subformRecord => {
                        addPromoterRow(subformRecord);
                    });
                }

                // Handle UBO subform data
                if (recordData.Details_of_UBO && Array.isArray(recordData.Details_of_UBO)) {
                    console.log('Populating UBO subform data:', recordData.Details_of_UBO);

                    // Clear existing UBO rows first
                    const existingUBORows = document.querySelectorAll('#uboSubformContainer .promoter-row:not(#uboRowTemplate)');
                    existingUBORows.forEach(row => row.remove());

                    // Reset counter
                    uboRowCounter = 0;

                    // Add rows for each UBO subform record
                    recordData.Details_of_UBO.forEach(subformRecord => {
                        addUBORow(subformRecord);
                    });
                }

                // Initialize subforms if no data was loaded (only for Non-Individual layout)
                setTimeout(() => {
                    if (currentLayoutId === LAYOUT_IDS.NON_INDIVIDUAL) {
                        const promoterRows = document.querySelectorAll('#promoterSubformContainer .promoter-row:not(#promoterRowTemplate)');
                        const uboRows = document.querySelectorAll('#uboSubformContainer .promoter-row:not(#uboRowTemplate)');

                        if (promoterRows.length === 0) {
                            addPromoterRow();
                        }

                        if (uboRows.length === 0) {
                            addUBORow();
                        }
                    }
                    restoreStoredPhotos();
                    addMandatoryFieldListeners();
                    checkMandatoryFieldsForCurrentStep();
                }, 300);

                // Set hidden fields in the active form
                const recordIdField = activeForm.querySelector('#recordId');
                const recordStatusField = activeForm.querySelector('#recordStatus');

                if (recordIdField) recordIdField.value = recordData.id || '';
                if (recordStatusField) recordStatusField.value = recordData.Onboarding_Status || 'Draft';

                WIDGET_CONFIG.recordStatus = recordData.Onboarding_Status || 'Draft';

                console.log('Form population completed successfully');

            } catch (error) {
                console.error('Error populating form:', error);
                showAlert('Error populating form fields: ' + error.message, 'error');
            }
        }

        // ...existing code...

        // ...existing code...

        // Save draft function
        async function saveDraft() {
            try {
                if (!WIDGET_CONFIG.isZohoInitialized) {
                    showAlert('Cannot save: Zoho integration not available. Please check your connection.', 'error');
                    return;
                }

                showLoading(true);
                const formData = collectFormData();

                // Convert form data -> CRM API field names
                let crmData = convertToCRMFormat(formData);
                crmData.Onboarding_Status = 'Draft';

                // IMPORTANT: Handle photo deletions in CRM data
                ['First', 'Second', 'Third'].forEach(holderType => {
                    const photoField = `Photo_of_${holderType}_Holder`;
                    if (isPhotoMarkedForDeletion(holderType)) {
                        // Explicitly set photo field to empty/null for deletion
                        crmData[photoField] = null;
                        console.log(`Setting ${photoField} to null for deletion`);
                    }
                });

                // COMPLETELY IGNORE Owner field - don't try to set it at all
                delete crmData.Owner;

                // fallback name logic
                if (!crmData.Last_Name && !crmData.Name) {
                    const fallbackName = formData.nameOfApplicant || 'Draft Entry';
                    crmData.Last_Name = fallbackName;
                    if (!crmData.First_Name) crmData.First_Name = fallbackName.split(' ')[0] || fallbackName;
                }

                // Ensure other fields are properly normalized
                Object.keys(crmData).forEach(key => {
                    if (crmData[key] === null || crmData[key] === undefined || crmData[key] === '') {
                        delete crmData[key]; // Remove empty fields
                    }
                });

                // Handle boolean fields
                if (crmData.Email_Opt_Out !== undefined) {
                    const v = String(crmData.Email_Opt_Out).toLowerCase();
                    crmData.Email_Opt_Out = (v === 'true' || v === '1' || v === 'yes' || v === 'y' || v === 'on');
                }

                console.log('Prepared CRM payload (before insert/update):', crmData);
                console.log('Current record ID:', WIDGET_CONFIG.recordId);

                let response;

                // Check if we have a valid record ID for updating
                const hasValidRecordId = WIDGET_CONFIG.recordId &&
                    WIDGET_CONFIG.recordId !== '' &&
                    WIDGET_CONFIG.recordId !== null &&
                    WIDGET_CONFIG.recordId !== 'null' &&
                    WIDGET_CONFIG.recordId !== 'undefined' &&
                    !isNaN(Number(WIDGET_CONFIG.recordId));

                if (hasValidRecordId) {
                    // Update existing record
                    console.log('Updating existing record with ID:', WIDGET_CONFIG.recordId);

                    // For updates, include the id in the data payload
                    const updateData = {
                        ...crmData,
                        id: WIDGET_CONFIG.recordId.toString()
                    };

                    response = await ZOHO.CRM.API.updateRecord({
                        Entity: "Onboarding",
                        APIData: [updateData]
                    });
                } else {
                    // Create new record
                    console.log('Creating new record...');
                    response = await ZOHO.CRM.API.insertRecord({
                        Entity: "Onboarding",
                        APIData: [crmData]
                    });
                }

                console.log('Save response:', response);

                if (response && response.data && response.data.length > 0) {
                    const result = response.data[0];
                    if (result.code === 'SUCCESS') {
                        showAlert('Record saved as draft successfully!', 'success');
                        updateStatusBadge('draft');
                        WIDGET_CONFIG.recordStatus = 'draft';
                        WIDGET_CONFIG.isEditMode = true;

                        // Store the record ID if it's a new record
                        if (result.details && result.details.id) {
                            WIDGET_CONFIG.recordId = result.details.id;
                        }

                        // IMPORTANT: After successful save, clear deletion marks for photos that were actually deleted
                        ['First', 'Second', 'Third'].forEach(holderType => {
                            if (isPhotoMarkedForDeletion(holderType)) {
                                // Photo was successfully deleted, clean up localStorage
                                removeStoredPhotoData(holderType);
                                clearPhotoDeletionMark(holderType);
                            }
                        });

                        // ADD THIS: Redirect to CRM record detail page
                        setTimeout(() => {
                            redirectToCRMRecord(WIDGET_CONFIG.recordId);
                        }, 1000); // Small delay to show the success message

                    } else {
                        showAlert('Error saving draft: ' + (result.message || 'Unknown error'), 'error');
                        const errMsg = result.message || JSON.stringify(result);
                        throw new Error('Zoho Save failed: ' + errMsg);
                    }
                } else {
                    throw new Error('No response or unexpected response format from Zoho API');
                }
            } catch (error) {
                console.error('Error saving draft:', error);
                showAlert('Error saving draft: ' + (error.message || 'Unknown error'), 'error');
            } finally {
                showLoading(false);
            }
        }

        // Submit form function
        async function submitForm() {
            try {
                if (!WIDGET_CONFIG.isZohoInitialized) {
                    showAlert('Cannot submit: Zoho integration not available. Please check your connection.', 'error');
                    return;
                }

                if (!validateAllSteps()) {
                    showAlert('Please complete all required fields before submitting.', 'error');
                    return;
                }

                showLoading(true);
                const formData = collectFormData();

                // Prepare data for Zoho CRM
                let crmData = convertToCRMFormat(formData);
                crmData.Onboarding_Status = 'Submitted';

                // IMPORTANT: Handle photo deletions in CRM data
                ['First', 'Second', 'Third'].forEach(holderType => {
                    const photoField = `Photo_of_${holderType}_Holder`;
                    if (isPhotoMarkedForDeletion(holderType)) {
                        // Explicitly set photo field to empty/null for deletion
                        crmData[photoField] = null;
                        console.log(`Setting ${photoField} to null for deletion`);
                    }
                });

                // COMPLETELY IGNORE Owner field - don't try to set it at all
                delete crmData.Owner;

                // Clean up any null, undefined, or empty string values
                Object.keys(crmData).forEach(key => {
                    if (crmData[key] === null || crmData[key] === undefined || crmData[key] === '') {
                        delete crmData[key];
                    }
                });

                console.log('Prepared CRM payload for submit:', crmData);
                console.log('Current record ID:', WIDGET_CONFIG.recordId);

                let response;

                // Check if we have a valid record ID for updating
                const hasValidRecordId = WIDGET_CONFIG.recordId &&
                    WIDGET_CONFIG.recordId !== '' &&
                    WIDGET_CONFIG.recordId !== null &&
                    WIDGET_CONFIG.recordId !== 'null' &&
                    WIDGET_CONFIG.recordId !== 'undefined' &&
                    !isNaN(Number(WIDGET_CONFIG.recordId));

                if (hasValidRecordId) {
                    // Update existing record
                    console.log('Submitting existing record with ID:', WIDGET_CONFIG.recordId);

                    // For updates, include the id in the data payload
                    const updateData = {
                        ...crmData,
                        id: WIDGET_CONFIG.recordId.toString()
                    };

                    response = await ZOHO.CRM.API.updateRecord({
                        Entity: "Onboarding",
                        APIData: [updateData]
                    });
                } else {
                    // Create new record
                    console.log('Creating and submitting new record...');
                    response = await ZOHO.CRM.API.insertRecord({
                        Entity: "Onboarding",
                        APIData: [crmData]
                    });
                }

                console.log('Submit response:', response);

                if (response && response.data && response.data.length > 0) {
                    const result = response.data[0];
                    if (result.code === 'SUCCESS') {
                        WIDGET_CONFIG.recordStatus = 'Submitted';
                        document.getElementById('recordStatus').value = 'Submitted';
                        const newId = result.details && (result.details.id || result.details.ID);
                        if (newId) {
                            WIDGET_CONFIG.recordId = newId.toString();
                            document.getElementById('recordId').value = newId.toString();
                            console.log('Record submitted with ID:', newId);
                        }
                        updateStatusBadge('submitted');
                        lockForm();

                        // IMPORTANT: Clean up all photo storage after successful submission
                        cleanupPhotoStorage();

                        showAlert('Form submitted successfully! Your onboarding record has been locked for editing.', 'success');

                        // Redirect to CRM record detail page
                        setTimeout(() => {
                            redirectToCRMRecord(WIDGET_CONFIG.recordId);
                        }, 1000);
                    } else {
                        throw new Error(result.message || JSON.stringify(result));
                    }
                } else {
                    throw new Error('No response or unexpected response format from Zoho API');
                }
            } catch (error) {
                console.error('Error submitting form:', error);
                showAlert('Error submitting form: ' + (error.message || 'Unknown error'), 'error');
            } finally {
                showLoading(false);
            }
        }

        // Keep all existing utility functions
        function updateStatusBadge(status) {
            const statusContainer = document.getElementById('statusContainer');
            const statusBadge = document.getElementById('statusBadge');

            statusContainer.classList.remove('hidden');
            statusBadge.className = `status-badge status-${status}`;

            switch (status.toLowerCase()) {
                case 'draft':
                case 'in progress':
                    statusBadge.className = 'status-badge status-draft';
                    //statusBadge.textContent = 'Draft - In Progress';
                    break;
                case 'submitted':
                case 'under review':
                    statusBadge.className = 'status-badge status-submitted';
                    //statusBadge.textContent = 'Submitted - Under Review';
                    break;
                case 'approved':
                case 'locked':
                    statusBadge.className = 'status-badge status-locked';
                    //statusBadge.textContent = 'Approved - Locked for Editing';
                    break;
                case 'rejected':
                    statusBadge.className = 'status-badge status-error';
                    //statusBadge.textContent = 'Rejected - Requires Revision';
                    break;
                default:
                    statusBadge.className = 'status-badge status-draft';
                //statusBadge.textContent = 'Draft - In Progress';
            }
        }

        function lockForm() {
            console.log('=== LOCKING FORM ===');

            const inputs = document.querySelectorAll('input, select, textarea');
            inputs.forEach(input => {
                if (input.id !== 'recordId' && input.id !== 'recordStatus') {
                    input.disabled = true;
                    input.style.backgroundColor = '#f8f9fa';
                    input.style.cursor = 'not-allowed';
                }
            });

            // Hide action buttons
            const saveDraftBtn = document.getElementById('saveDraftBtn');
            const submitBtn = document.getElementById('submitBtn');
            const nextBtn = document.getElementById('nextBtn');

            if (saveDraftBtn) {
                saveDraftBtn.style.display = 'none';
                saveDraftBtn.classList.add('hidden');
            }

            if (submitBtn) {
                submitBtn.style.display = 'none';
                submitBtn.classList.add('hidden');
            }

            if (nextBtn && WIDGET_CONFIG.currentStep < WIDGET_CONFIG.totalSteps) {
                nextBtn.textContent = 'Next (View Only)';
                nextBtn.style.display = 'inline-block';
                nextBtn.classList.remove('hidden');
            }

            console.log('=== FORM LOCK COMPLETE ===');
            showAlert('This record has been submitted/approved and is locked for editing.', 'warning');
        }

        function unlockForm() {
            console.log('=== UNLOCKING FORM ===');

            // Enable all form inputs
            const inputs = document.querySelectorAll('input, select, textarea');
            inputs.forEach(input => {
                if (input.id !== 'recordId' && input.id !== 'recordStatus') {
                    input.disabled = false;
                    input.style.backgroundColor = '';
                    input.style.cursor = '';
                }
            });
            console.log('Form inputs enabled');

            // Force show the buttons with multiple methods
            const saveDraftBtn = document.getElementById('saveDraftBtn');
            const nextBtn = document.getElementById('nextBtn');
            const submitBtn = document.getElementById('submitBtn');

            if (saveDraftBtn) {
                saveDraftBtn.style.display = 'inline-block';
                saveDraftBtn.style.visibility = 'visible';
                saveDraftBtn.classList.remove('hidden');
                saveDraftBtn.removeAttribute('hidden');
                console.log('Save Draft button forced visible');
            }

            if (nextBtn) {
                nextBtn.style.display = 'inline-block';
                nextBtn.style.visibility = 'visible';
                nextBtn.classList.remove('hidden');
                nextBtn.removeAttribute('hidden');
                nextBtn.textContent = 'Next';
                console.log('Next button forced visible');
            }

            // Hide submit button on non-final steps
            if (submitBtn && WIDGET_CONFIG.currentStep < WIDGET_CONFIG.totalSteps) {
                submitBtn.style.display = 'none';
                submitBtn.classList.add('hidden');
            }

            console.log('=== FORM UNLOCK COMPLETE ===');

            // Double-check after a short delay
            setTimeout(() => {
                console.log('Post-unlock check:');
                console.log('Save Draft visible?', saveDraftBtn ? saveDraftBtn.style.display : 'not found');
                console.log('Next visible?', nextBtn ? nextBtn.style.display : 'not found');
                console.log('Submit:', submitBtn ? submitBtn.style.display : 'not found');
                console.log('Any disabled inputs?', document.querySelectorAll('input:disabled, select:disabled, textarea:disabled').length);
            }, 50);
        }

        function changeStep(direction) {
            const isLocked = document.querySelector('input:disabled') !== null;

            if (direction === 1 && !isLocked && !validateCurrentStep()) {
                return;
            }

            const newStep = WIDGET_CONFIG.currentStep + direction;

            if (newStep < 1 || newStep > WIDGET_CONFIG.totalSteps) {
                return;
            }

            goToStep(newStep);
        }

        // Add this new function for direct step navigation
        function goToStep(targetStep) {
            // Don't allow navigation if form is locked
            const isLocked = document.querySelector('input:disabled') !== null;
            if (isLocked) {
                showAlert('Form is locked. Navigation is view-only.', 'warning');
            }

            // Validate current step before moving forward (only if not locked)
            if (!isLocked && targetStep > WIDGET_CONFIG.currentStep && !validateCurrentStep()) {
                return;
            }

            // Hide all steps
            document.querySelectorAll('.form-step').forEach(step => {
                step.style.display = 'none';
                step.classList.remove('active');
            });

            // Remove active class from all indicators
            document.querySelectorAll('.step-indicator').forEach(indicator => {
                indicator.classList.remove('active');
            });

            // Mark completed steps
            for (let i = 1; i < targetStep; i++) {
                document.querySelector(`.step-indicator[data-step="${i}"]`).classList.add('completed');
            }

            // Show target step
            const targetStepElement = document.querySelector(`.form-step[data-step="${targetStep}"]`);
            const targetIndicator = document.querySelector(`.step-indicator[data-step="${targetStep}"]`);

            if (targetStepElement && targetIndicator) {
                targetStepElement.style.display = 'block';
                targetStepElement.classList.add('active');
                targetIndicator.classList.add('active');

                WIDGET_CONFIG.currentStep = targetStep;

                // Scroll to top of form container
                const formContainer = document.querySelector('.form-container');
                formContainer.scrollTop = 0;

                // Also scroll page to top
                window.scrollTo({ top: 0, behavior: 'smooth' });

                updateButtons();
                updateProgressBar();
            }
        }

        // Reusable function to redirect to CRM record detail page
        function redirectToCRMRecord(recordId) {
            if (!recordId) {
                console.warn('No record ID available for redirect');
                return;
            }

            console.log('Redirecting to CRM record:', recordId);

            // Close widget popup if it exists
            if (typeof ZOHO !== 'undefined' && ZOHO.CRM && ZOHO.CRM.UI && ZOHO.CRM.UI.Popup) {
                ZOHO.CRM.UI.Popup.close().then(function () {
                    performRedirect(recordId);
                }).catch(function () {
                    // If popup close fails, still attempt redirect
                    performRedirect(recordId);
                });
            } else {
                performRedirect(recordId);
            }
        }

        // Helper function to perform the actual redirect
        function performRedirect(recordId) {
            try {
                if (window.top && window.top.location) {
                    // Construct the CRM record URL
                    const orgId = ZOHO.CRM.CONFIG ? ZOHO.CRM.CONFIG.getOrgId() : '';
                    const recordUrl = `/crm/org${orgId}/tab/CustomModule10/${recordId}`;
                    console.log('Redirecting to:', recordUrl);
                    window.top.location.href = recordUrl;
                } else if (window.parent && window.parent.location) {
                    // Fallback to parent window
                    const orgId = ZOHO.CRM.CONFIG ? ZOHO.CRM.CONFIG.getOrgId() : '';
                    window.parent.location.href = `/crm/org${orgId}/tab/CustomModule10/${recordId}`;
                } else {
                    console.warn('Unable to redirect - no parent window access');
                }
            } catch (error) {
                console.error('Error during redirect:', error);
            }
        }
        // Update the existing changeStep function
        function changeStep(direction) {
            const isLocked = document.querySelector('input:disabled') !== null;

            if (direction === 1 && !isLocked && !validateCurrentStep()) {
                return;
            }

            const newStep = WIDGET_CONFIG.currentStep + direction;

            if (newStep < 1 || newStep > WIDGET_CONFIG.totalSteps) {
                return;
            }

            goToStep(newStep);
        }

        // Add these missing utility functions if they don't exist

        function updateButtons() {
            const prevBtn = document.getElementById('prevBtn');
            const nextBtn = document.getElementById('nextBtn');
            const submitBtn = document.getElementById('submitBtn');
            const saveDraftBtn = document.getElementById('saveDraftBtn');

            // Show/hide previous button
            if (prevBtn) {
                prevBtn.style.display = WIDGET_CONFIG.currentStep === 1 ? 'none' : 'inline-block';
            }

            // Show/hide next and submit buttons
            if (WIDGET_CONFIG.currentStep === WIDGET_CONFIG.totalSteps) {
                if (nextBtn) nextBtn.style.display = 'none';
                if (submitBtn) {
                    submitBtn.style.display = 'inline-block';
                    submitBtn.classList.remove('hidden');
                }
            } else {
                if (nextBtn) {
                    nextBtn.style.display = 'inline-block';
                    nextBtn.classList.remove('hidden');
                }
                if (submitBtn) {
                    submitBtn.style.display = 'none';
                    submitBtn.classList.add('hidden');
                }
            }

            // Always show save draft button unless form is locked
            const isLocked = document.querySelector('input:disabled') !== null;
            if (saveDraftBtn && !isLocked) {
                saveDraftBtn.style.display = 'inline-block';
                saveDraftBtn.classList.remove('hidden');
            }
        }

        function updateProgressBar() {
            const progressFill = document.getElementById('progressFill');
            if (progressFill) {
                const progressPercentage = ((WIDGET_CONFIG.currentStep - 1) / (WIDGET_CONFIG.totalSteps - 1)) * 100;
                progressFill.style.width = progressPercentage + '%';
            }
        }

        // Replace the existing validateCurrentStep function with this updated version:

        function validateCurrentStep() {
            // For Non-Individual layout, there's only one step, so validate the entire form
            if (currentLayoutId === LAYOUT_IDS.NON_INDIVIDUAL) {
                return validateAllSteps();
            }

            // For Individual layout, validate only the current step
            const currentStepElement = document.querySelector(`.form-step[data-step="${WIDGET_CONFIG.currentStep}"]`);
            if (!currentStepElement) return true;

            const requiredFields = currentStepElement.querySelectorAll('input[required], select[required]');
            let isValid = true;
            let firstInvalidField = null;

            requiredFields.forEach(field => {
                // Skip validation for disabled fields
                if (field.disabled || field.style.display === 'none') {
                    return;
                }

                const fieldValue = field.value ? field.value.trim() : '';

                if (!fieldValue || fieldValue === '-None-') {
                    field.style.borderColor = 'red';
                    field.style.borderWidth = '2px';
                    isValid = false;

                    if (!firstInvalidField) {
                        firstInvalidField = field;
                    }
                } else {
                    field.style.borderColor = '';
                    field.style.borderWidth = '';
                }
            });

            if (!isValid) {
                if (firstInvalidField) {
                    firstInvalidField.scrollIntoView({
                        behavior: 'smooth',
                        block: 'center'
                    });

                    setTimeout(() => {
                        firstInvalidField.focus();
                    }, 500);
                }

                showAlert('Please fill all required fields before proceeding.', 'error');
            }

            return isValid;
        }

        // Replace the existing validateAllSteps function with this updated version:

        function validateAllSteps() {
            // Determine which form to validate based on current layout
            const formId = (currentLayoutId === LAYOUT_IDS.NON_INDIVIDUAL) ? 'NonIndividualForm' : 'onboardingForm';
            const activeForm = document.getElementById(formId);

            if (!activeForm) {
                console.error('Active form not found:', formId);
                return false;
            }

            // Only check required fields in the active form
            const allRequiredFields = activeForm.querySelectorAll('input[required], select[required]');
            let isValid = true;
            let firstInvalidField = null;

            console.log(`Validating ${allRequiredFields.length} required fields in ${formId}`);

            allRequiredFields.forEach(field => {
                // Skip validation for disabled fields (subform templates, etc.)
                if (field.disabled || field.style.display === 'none' ||
                    field.closest('#promoterRowTemplate') || field.closest('#uboRowTemplate')) {
                    return;
                }

                const fieldValue = field.value ? field.value.trim() : '';

                if (!fieldValue || fieldValue === '-None-') {
                    field.style.borderColor = 'red';
                    field.style.borderWidth = '2px';
                    isValid = false;

                    if (!firstInvalidField) {
                        firstInvalidField = field;
                    }

                    console.log('Invalid required field:', field.name || field.id, 'Value:', fieldValue);
                } else {
                    field.style.borderColor = '';
                    field.style.borderWidth = '';
                }
            });

            if (!isValid) {
                // Scroll to first invalid field
                if (firstInvalidField) {
                    firstInvalidField.scrollIntoView({
                        behavior: 'smooth',
                        block: 'center'
                    });

                    // Focus on the field after scrolling
                    setTimeout(() => {
                        firstInvalidField.focus();
                    }, 500);
                }

                showAlert('Please fill all required fields (marked in red) before submitting.', 'error');
            }

            return isValid;
        }

        // ...existing code...

        // ...existing code...

        function collectFormData() {
            const formData = {};

            // Determine which form to collect data from based on current layout
            const formId = (currentLayoutId === LAYOUT_IDS.NON_INDIVIDUAL) ? 'NonIndividualForm' : 'onboardingForm';
            const form = document.getElementById(formId);

            if (!form) {
                console.error('Form not found:', formId);
                return formData;
            }

            const formElements = form.querySelectorAll('input, select, textarea');

            formElements.forEach(element => {
                // Skip subform fields as they're handled separately
                if (element.classList.contains('promoter-field') || element.classList.contains('ubo-field')) {
                    return;
                }

                if (element.type === 'checkbox') {
                    formData[element.name] = element.checked;
                } else if (element.type === 'radio') {
                    if (element.checked) {
                        formData[element.name] = element.value;
                    }
                } else if (element.name && element.value !== undefined) {
                    formData[element.name] = element.value;
                }
            });

            // IMPORTANT: Handle photo fields with deletion marks
            ['First', 'Second', 'Third'].forEach(holderType => {
                const photoFieldName = `photo${holderType}Holder`;
                const input = document.getElementById(photoFieldName);

                if (input) {
                    if (isPhotoMarkedForDeletion(holderType)) {
                        // Photo is marked for deletion, send empty value
                        formData[photoFieldName] = '';
                        console.log(`Photo ${holderType} marked for deletion, sending empty value`);
                    } else if (input.files && input.files[0]) {
                        // Photo exists and not marked for deletion
                        formData[photoFieldName] = input.files[0].name;
                    } else {
                        // Check if there's stored photo data
                        const storedPhoto = getStoredPhotoData(holderType);
                        if (storedPhoto) {
                            formData[photoFieldName] = storedPhoto.name;
                        }
                    }
                }
            });

            // Add subform data
            formData.promoterSubform = collectPromoterSubformData();
            formData.uboSubform = collectUBOSubformData();

            console.log('Collected form data from:', formId, formData);
            return formData;
        }

        // ...existing code...

        // ...existing code...

        // ...existing code...

        // ...existing code...

        function convertToCRMFormat(formData) {
            const crmData = {};

            // Create layout-specific reverse mappings for conversion
            let layoutFieldMapping = {};

            if (currentLayoutId === LAYOUT_IDS.NON_INDIVIDUAL) {
                // Non-Individual layout reverse mappings (Complete)
                layoutFieldMapping = {
                    'Name': 'Name',
                    'Place_of_Incorporation': 'Place_of_Incorporation',
                    'CKYC_No': 'CKYC_No',
                    'PAN': 'PAN',
                    'TAN': 'TAN',
                    'Status_Select_One': 'Status_Select_One',
                    'Date_of_Birth': 'Date_of_Birth',
                    'Date_of_Commencement_of_Business': 'Date_of_Commencement_of_Business',
                    'GST_No': 'GST_No',
                    'Registration_No_e_g_CIN': 'Registration_No_e_g_CIN',
                    'Sales_Type': 'Sales_Type',

                    // ADDRESS DETAILS - Non-Individual
                    'Address_for_Correspondence_Local_Address_in_case': 'Address_for_Correspondence_Local_Address_in_case',
                    'FH_Pincode': 'Pincode',
                    'FH_Country': 'Country',
                    'FH_Mobile': 'Mobile',
                    'Registered_Address': 'Registered_Address',
                    'Pincode_AD': 'Pincode_AD',
                    'Country_AD': 'Country_PA',
                    'Mobile_AD': 'Mobile_AD',
                    'FH_City_Town_Village': 'City_Town_Village',
                    'FH_State': 'State',
                    'FH_Telephone': 'Telephone',
                    'Email_ID_AD': 'Email_ID1',
                    'Specify_proof_of_address_submitted_for_Permanent_A': 'Specify_proof_of_address_submitted_for_Permanent_A',
                    'City_Town_Village_AD': 'City_Town_Village_PA',
                    'State_AD': 'State_AD',
                    'Telephone_AD': 'Telephone_AD',
                    'Specify_Proof_of_Address_for_Correspondence_AD': 'Specify_the_Proof_of_Address_for_Correspondence_AD',

                    // OTHER DETAILS - Non-Individual
                    'Net_worth_Not_older_than_1_year_NI': 'Net_worth_Not_older_than_1_year1',
                    'FH_Income_Range_per_annum_NI': 'Income_Range_per_annum',
                    'Type_of_Company_Firm_NI': 'Type_of_Company_Firm_NI',
                    'Investment_Experience_in_Listed_Equities_NI': 'Investment_Experience_in_Listed_Equities_if_any',
                    'FH_As_on_Date_NI': 'As_on_Date',
                    'Nature_of_Business_Occupation_NI': 'Nature_of_Business_Occupation_NI',
                    'FH_Sources_of_Funds_NI': 'Sources_of_Funds',
                    'FH_Any_other_information_NI': 'DP_ID',

                    // BANK ACCOUNT DETAILS - Non-Individual
                    'FH_Bank_Name': 'Bank_Name',
                    'FH_IFSC_Code': 'IFSC_Code',
                    'FH_Account_No': 'Account_No',
                    'FH_Branch': 'Branch',
                    'FH_Account_Type': 'Account_Type',

                    // INVESTMENT PROFILE - Non-Individual
                    'Risk_Tolerance_for_Investment': 'Risk_Tolerance_for_Investment',
                    'Indicative_Time_Period_of_Investments': 'Indicative_Time_Period_of_Investments',
                    'FH_Overall_Investment_Goals': 'Overall_Investment_Goals',
                    'Preferred_Asset_Class': 'Preferred_Asset_Class',
                    'Investment_Experience_in_Equity_Markets': 'Investment_Experience_in_Equity_Markets',
                    'Systematic_Transfer_Plan': 'Systematic_Transfer_Plan',
                    'Indicative_Total_Investment_Portfolio_Propose': 'Indicative_of_Total_Investment_Portfolio_propose',
                    'Type_of_PMS_Account': 'Type_of_PMS_Account',

                    // CLIENT INTRODUCED BY - Non-Individual
                    'Client_Name': 'Client_Name',
                    'Address': 'Address',

                    // APPLICANTS DECLARATION - Non-Individual
                    'Photo_of_First_Holder': 'Photo_of_First_Holder',
                    'firstHolderDateNI': 'First_Holder_Date',
                    'firstHolderPlaceNI': 'First_Holder_Place',
                    'Photo_of_Third_Holder': 'Photo_of_Third_Holder',
                    'thirdHolderDateNI': 'Third_Holder_Date',
                    'thirdHolderPlaceNI': 'Third_Holder_Place',
                    'Photo_of_Second_Holder': 'Photo_of_Second_Holder',
                    'secondHolderDateNI': 'Second_Holder_Date',
                    'secondHolderPlaceNI': 'Second_Holder_Place',

                    // PROMOTER DETAILS - Non-Individual
                    'Promoter_Name_of_Applicant': 'Name_of_Applicant',
                    'Promoter_FH_PAN_Card': 'PAN_Card',

                    // STATUS - Non-Individual
                    'Onboarding_Status': 'Onboarding_Status'
                };
            } else {
                // Individual/NRI layout reverse mappings (Complete)
                layoutFieldMapping = {
                    // IDENTITY DETAILS - First/Sole Holder
                    'nameOfApplicant': 'Name',
                    'fh_fatherSpouseName': 'Father_s_Spouse_s_name',
                    'fh_motherName': 'Mother_s_Name',
                    'fh_dateOfBirth': 'FH_Date_of_Birth',
                    'fh_maritalStatus': 'Marital_Status',
                    'secondaryEmail': 'Secondary_Email',
                    'fh_gender': 'Gender',
                    'fh_citizenship': 'Citizenship',
                    'email': 'Email',
                    'fh_typeOfAccount': 'FH_Type_of_Account',
                    'fh_residentialStatus': 'Residential_Status',
                    'fh_pan': 'PAN',
                    'fh_gstNo': 'GST_No',
                    'fh_uidAadhaar': 'UID_Aadhaar_No',
                    'fh_ckyc': 'CKYC_No',
                    'fh_tan': 'TAN',
                    'emailOptOut': 'Email_Opt_Out',
                    'exchangeRate': 'Exchange_Rate',
                    'currency': 'Currency',
                    'investorDistributorType': 'Investor_Distributor_Type',
                    'salesType': 'Sales_Type',

                    // INCOME DETAILS - First/Sole Holder
                    'fh_netWorth': 'Net_worth_Not_older_than_1_year',
                    'fh_asOnDate': 'As_on_Date',
                    'fh_incomeRange': 'Income_Range_per_annum',
                    'fh_occupation': 'Occupation',
                    'fh_pleaseSelectStatus': 'Please_select_Status',
                    'fh_sourcesOfFunds': 'Sources_of_Funds',
                    'fh_natureOfBusinessProfession': 'Nature_of_Business_Type_of_Company_Firm_Prof',
                    'fh_overallInvestmentGoals': 'Overall_Investment_Goals',
                    'fh_typeOfCompanyFirm': 'Type_of_Company_Firm',
                    'fh_pleaseSelectStatus2': 'Please_select_Status2',

                    // CONTACT DETAILS - First/Sole Holder
                    'fh_mobileNo': 'Mobile_No',
                    'fh_landlineNo': 'Landline_No',
                    'fh_emailId': 'Email_ID',

                    // PROOF OF IDENTITY - First/Sole Holder
                    'fh_passportNumber': 'Passport_Number',
                    'fh_passportExpiryDate': 'Passport_Expiry_Date',
                    'fh_panCard': 'PAN_Card',
                    //'preferredAssetClassOther': 'Preferred_Asset_Class_Other',
                    'fh_voterID': 'Voter_ID',
                    'fh_uidAadhaarProof': 'UID_Aadhaar',
                    'fh_drivingLicense': 'Driving_License',
                    'fh_drivingLicenseExpiryDate': 'Driving_License_Expiry_Date',

                    // PROOF OF ADDRESS - First/Sole Holder
                    'fh_addressType': 'Address_Type',
                    'fh_addressCorrespondence': 'Address_for_Correspondence_Local_Address_in_case',
                    'fh_pincode': 'Pincode',
                    'fh_country': 'Country',
                    'fh_mobile': 'Mobile',
                    //'fh_permanentAddress': 'Permanent_address',
                    'fh_pincodePA': 'Pincode_PA',
                    'fh_countryPA': 'Country_PA',
                    'fh_proofOfAddressPermanent': 'Specify_proof_of_address_submitted_for_Permanent_A',
                    'fh_proofOfAddress': 'Proof_of_Address',
                    'fh_cityTownVillage': 'City_Town_Village',
                    'fh_state': 'State',
                    'fh_telephone': 'Telephone',
                    'fh_emailIdAD': 'Email_ID1',
                    'fh_cityTownVillagePA': 'City_Town_Village_PA',
                    'fh_statePA': 'State_PA',
                    'fh_telephonePA': 'Telephone_PA',
                    'fh_mobilePA': 'Mobile_PA',

                    // Tax Residency in Jurisdiction(s) Outside India - F
                    'taxResidencyInJurisdictionOutsideIndia': 'Tax_Residency_in_Jurisdiction_s_Outside_India',
                    'countryOfBirth': 'Country_of_Birth',
                    'taxIdentificationNumberOrEquivalent': 'Tax_Identification_Number_or_Equivalent',
                    'placeCityOfBirth': 'Place_City_of_Birth',
                    'countryOfJurisdictionOfResidence': 'Country_of_Jurisdiction_of_Residence',

                    // BANK ACCOUNT DETAILS - First/Sole Holder
                    'bankName': 'Bank_Name',
                    'ifscCode': 'IFSC_Code',
                    'accountNo': 'Account_No',
                    'branch': 'Branch',
                    'accountType': 'Account_Type',

                    // DEPOSITORY ACCOUNT DETAILS - First/Sole Holder
                    'nameOfTheDPDepositoryParticipant': 'Name_of_the_DP_Depository_Participant',
                    'clientID': 'Client_ID',
                    'dpID': 'DP_ID',

                    // CONTACT PERSONS DETAILS - First/Sole Holder
                    'name1': 'Name1',
                    'mobileNo1': 'Mobile_No1',
                    'emailIdForCorrespondence': 'Email_ID_for_Receiving_All_Correspondence',

                    // SECOND HOLDER DETAILS
                    'sh_nameOfApplicant': 'Name_of_Applicant1',
                    'sh_fatherSpouseName': 'Father_s_Spouse_s_name1',
                    'sh_motherName': 'Mother_s_Name1',
                    'sh_relationshipWithMinor': 'Relationship_with_Minor',
                    'sh_dateOfBirth': 'Date_of_Birth1',
                    'sh_maritalStatus': 'Marital_Status1',
                    'sh_gender': 'Gender1',
                    'sh_citizenship': 'Citizenship1',
                    'sh_pan': 'PAN1',
                    'sh_gstNo': 'GST_No1',
                    'sh_uidAadhaar': 'UID_Aadhaar_No1',
                    'sh_ckycNo': 'CKYC_No1',
                    'sh_tan': 'TAN1',
                    'sh_accountType': 'Account_Type1',
                    'sh_residentialStatus': 'Residential_Status1',

                    // INCOME DETAILS - Second Holder
                    'Net_worth_Not_older_than_1_year1': 'Net_worth_Not_older_than_1_year1',
                    'As_on_Date1': 'As_on_Date1',
                    'Income_Range_per_annum1': 'Income_Range_per_annum1',
                    'Occupation1': 'Occupation1',
                    'Please_select_Status1': 'Please_select_Status1',
                    'Sources_of_Funds1': 'Sources_of_Funds1',
                    'SH_Nature_of_Business_Profession': 'SH_Nature_of_Business_Profession',
                    'Overall_Investment_Goals1': 'Overall_Investment_Goals1',
                    'SH_Type_of_Company_Firm': 'SH_Type_of_Company_Firm',

                    // CONTACT DETAILS - Second Holder
                    'sh_mobileNo': 'Mobile_no2',
                    'sh_landlineNo': 'Landline_No1',
                    'sh_emailId': 'Email_ID2',

                    // PROOF OF IDENTITY - Second Holder
                    'Passport_Number1': 'Passport_Number1',
                    'Passport_Expiry_Date1': 'Passport_Expiry_Date1',
                    'PAN_Card1': 'PAN_Card1',
                    'Voter_ID1': 'Voter_ID1',
                    'UID_Aadhaar1': 'UID_Aadhaar1',
                    'Driving_License1': 'Driving_License1',
                    'Driving_License_Expiry_Date1': 'Driving_License_Expiry_Date1',

                    // PROOF OF ADDRESS - Second Holder
                    'Address_Type1': 'Address_Type1',
                    'Address_for_Correspondence_Local_Address_in_case1': 'Address_for_Correspondence_Local_Address_in_case1',
                    'Pincode1': 'Pincode1',
                    'Country1': 'Country1',
                    'Mobile1': 'Mobile1',
                    'Permanent_address1': 'Permanent_address1',
                    'SH_City_Town_Village_for_PA': 'SH_City_Town_Village_for_PA',
                    'SH_Country_PA': 'SH_Country_PA',
                    'SH_Mobile_PA': 'SH_Mobile_PA',
                    'Proof_of_Address1': 'Proof_of_Address1',
                    'City_Town_Village1': 'City_Town_Village1',
                    'State1': 'State1',
                    'Telephone1': 'Telephone1',
                    'Email_ID3': 'Email_ID3',
                    'Specify_proof_of_address_submitted_for_Permanent_A1': 'Specify_proof_of_address_submitted_for_Permanent_A1',
                    'SH_Pincode_for_PA': 'SH_Pincode_for_PA',
                    'SH_State_PA': 'SH_State_PA',
                    'SH_Telephone_PA': 'SH_Telephone_PA',

                    // Additional Second Holder fields
                    'sh_permanentAddress': 'Permanent_address1',
                    'sh_taxResidencyOutsideIndia': 'Tax_Residency_in_Jurisdiction_s_Outside_India1',

                    // Tax Residency in Jurisdiction(s) Outside India - S
                    'Tax_Residency_in_Jurisdiction_s_Outside_India1': 'Tax_Residency_in_Jurisdiction_s_Outside_India1',
                    'Country_of_Birth1': 'Country_of_Birth1',
                    'Tax_Identification_Number_or_Equivalent1': 'Tax_Identification_Number_or_Equivalent1',
                    'Place_City_of_Birth1': 'Place_City_of_Birth1',
                    'Country_of_Jurisdiction_of_Residence1': 'Country_of_Jurisdiction_of_Residence1',

                    // THIRD HOLDER DETAILS
                    'th_nameOfApplicant': 'Name_of_Applicant2',
                    'th_fatherSpouseName': 'Father_s_Spouse_s_name2',
                    'th_motherName': 'Mother_s_Name2',
                    'th_dateOfBirth': 'Date_of_Birth2',
                    'th_maritalStatus': 'TH_Marital_Status',
                    'th_gender': 'Registered_Address_2',
                    'th_citizenship': 'TH_Citizenship',
                    'th_pan': 'PAN2',
                    'th_gstNo': 'GST_No2',
                    'th_uidAadhaar': 'UID_Aadhaar_No2',
                    'th_ckycNo': 'CKYC_No2',
                    'th_tan': 'TAN2',
                    'th_residentialStatus': 'Residential_Status2',

                    // INCOME DETAILS - Third Holder
                    'Net_worth_Not_older_than_1_year2': 'Net_worth_Not_older_than_1_year2',
                    'As_on_Date2': 'As_on_Date2',
                    'Income_Range_per_annum2': 'Income_Range_per_annum2',
                    'TH_Occupation': 'TH_Occupation',
                    'TH_Please_select_Status': 'TH_Please_select_Status',
                    'TH_Sources_of_Funds': 'TH_Sources_of_Funds',
                    'TH_Nature_of_Busniess_Profession': 'TH_Nature_of_Busniess_Profession',
                    'TH_Overall_Investment_Goals': 'TH_Overall_Investment_Goals',
                    'TH_Type_of_Company_Firm': 'TH_Type_of_Company_Firm',

                    // CONTACT DETAILS - Third Holder
                    'th_mobileNo': 'TH_Mobile_No',
                    'th_landlineNo': 'TH_Landline_No',
                    'th_emailId': 'TH_Email_ID',

                    // PROOF OF IDENTITY - Third Holder
                    'TH_A_Passport_Number': 'TH_A_Passport_Number',
                    'TH_B_Voter_ID': 'TH_B_Voter_ID',
                    'TH_UID_Aadhaar': 'TH_UID_Aadhaar',
                    'TH_Driving_License': 'TH_Driving_License',
                    'TH_Driving_License_Expiry_Date': 'TH_Driving_License_Expiry_Date',
                    'TH_Passport_Expiry_Date': 'TH_Passport_Expiry_Date',
                    'TH_PAN_Card': 'TH_PAN_Card',

                    // PROOF OF ADDRESS - Third Holder
                    'TH_Address_Type': 'TH_Address_Type',
                    'TH_Address_for_Correspondence_Local_Address_in': 'TH_Address_for_Correspondence_Local_Address_in',
                    'TH_Pincode': 'TH_Pincode',
                    'TH_Country': 'TH_Country',
                    'TH_Email_ID_for_Proof_of_Address': 'TH_Email_ID_for_Proof_of_Address',
                    'TH_City_Town_Village_PA': 'TH_City_Town_Village_PA',
                    'TH_Pincode_PA': 'TH_Pincode_PA',
                    'TH_Mobile_PA': 'TH_Mobile_PA',
                    'THSpecify_proof_of_address_submitted_for_Permanent': 'THSpecify_proof_of_address_submitted_for_Permanent',
                    'TH_Proof_of_Address': 'TH_Proof_of_Address',
                    'TH_City_Town_Village': 'TH_City_Town_Village',
                    'TH_State': 'TH_State',
                    'TH_Telephone': 'TH_Telephone_1',
                    'TH_Mobile': 'TH_Mobile1',
                    'TH_Permanent_Address': 'TH_Permanent_Address',
                    'TH_State_PA': 'TH_State_PA',
                    'TH_Country_PA': 'TH_Country_PA',
                    'TH_Telephone_PA': 'TH_Telephone_PA',

                    // Tax Residency in Jurisdiction(s) Outside India - T
                    'TH_Tax_Residency_in_Jurisdiction_s_Outside_India': 'TH_Tax_Residency_in_Jurisdiction_s_Outside_India',
                    'TH_Country_of_Birth': 'TH_Country_of_Birth',
                    'TH_Tax_Identification_Number_or_Equivalent': 'TH_Tax_Identification_Number_or_Equivalent',
                    'TH_Place_City_of_Birth': 'TH_Place_City_of_Birth',
                    'TH_Country_of_Jurisdiction_of_Residence': 'TH_Country_of_Jurisdiction_of_Residence',

                    // INVESTMENT PROFILE AND OBJECTIVES OF THE CLIENT
                    'riskTolerance': 'Risk_Tolerance',
                    'investmentExperience': 'Investment_Experience_in_Equity_Markets',
                    'overallInvestmentGoalsForInvestment': 'Overall_Investment_Goals_for_Investment',
                    'preferredAssetClass': 'Preferred_Asset_Class',
                    'indicativeTimePeriodOfInvestments': 'Indicative_Time_Period_of_Investments',
                    'systematicTransferPlan': 'Systematic_Transfer_Plan',
                    'systematicTransferPlanDate': 'Systematic_Transfer_PlanDate',
                    'indicativeTotalInvestmentPortfolioPropose': 'Indicative_of_Total_Investment_Portfolio_propose',

                    // Client Introduced by
                    'clientName': 'Client_Name',
                    'clientAddress': 'Address',

                    // APPLICANT DECLARATION
                    'photoFirstHolder': 'Photo_of_First_Holder',
                    'firstHolderDate': 'First_Holder_Date',
                    'firstHolderPlace': 'First_Holder_Place',
                    'photoSecondHolder': 'Photo_of_Second_Holder',
                    'secondHolderDate': 'Second_Holder_Date',
                    'secondHolderPlace': 'Second_Holder_Place',
                    'photoThirdHolder': 'Photo_of_Third_Holder',
                    'thirdHolderDate': 'Third_Holder_Date',
                    'thirdHolderPlace': 'Third_Holder_Place',

                    // STATUS
                    'onboardingStatus': 'Onboarding_Status',
                    //'opportunity': 'Opportunity'
                };
            }

            // CORRECTED: Define fields that need specific data type conversions

            // Integer fields: pincode fields AND Third Holder phone/telephone fields
            // ...existing code around line 5927...

            // CORRECTED: Define fields that need specific data type conversions

            // Integer fields: ONLY pincode fields (like First and Second Holder)
            const integerFields = [
                'Pincode', 'Pincode_PA', 'Pincode_AD', 'Pincode1', 'SH_Pincode_for_PA',
                'TH_Pincode', 'TH_Pincode_PA'
                // REMOVED: Third Holder phone fields - they should be strings like First/Second Holder
            ];

            // Phone number fields (including Third Holder) - keep as strings like First/Second Holder
            const phoneFields = [
                // First Holder phone fields
                'Mobile_No', 'Landline_No', 'Mobile', 'Telephone', 'Telephone_PA', 'Mobile_PA',
                // Second Holder phone fields  
                'Mobile_No1', 'Landline_No1', 'Mobile1', 'Telephone1', 'SH_Mobile_PA', 'SH_Telephone_PA', 'Mobile_no2',
                // Third Holder phone fields - SAME TREATMENT as First/Second Holder
                'Mobile_No3', 'Landline_No2', 'TH_Mobile1', 'TH_Telephone_1', 'TH_Mobile_PA', 'TH_Telephone_PA',
                // Address related mobile/telephone fields
                'Mobile_AD', 'Telephone_AD'
            ];
            // ...existing code...

            // Email fields - keep as text strings
            const emailFields = [
                'Secondary_Email', 'Email', 'Email_ID', 'Email_ID_AD', 'Email_ID2', 'Email_ID3',
                'TH_Email_ID_for_Proof_of_Address', 'Email_ID_for_Receiving_All_Correspondence'
            ];

            // Text fields that should remain as strings
            const textFields = [
                'UID_Aadhaar_No', 'UID_Aadhaar_No1', 'UID_Aadhaar_No2',
                'UID_Aadhaar', 'UID_Aadhaar1', 'TH_UID_Aadhaar',
                'PAN', 'PAN1', 'PAN2', 'TAN', 'TAN1', 'TAN2',
                'CKYC_No', 'CKYC_No1', 'CKYC_No2', 'GST_No', 'GST_No1', 'GST_No2',
                //'Opportunity'
            ];

            // Picklist fields - ensure proper string handling
            const picklistFields = [
                'Please_select_Status', 'Please_select_Status1', 'Please_select_Status2',
                'Onboarding_Status', 'Tax_Residency_in_Jurisdiction_s_Outside_India',
                'Tax_Residency_in_Jurisdiction_s_Outside_India1', 'Permanent_address1'
            ];

            const floatFields = [
                'Net_worth_Not_older_than_1_year', 'Net_worth_Not_older_than_1_year1',
                'Net_worth_Not_older_than_1_year2', 'Exchange_Rate',
                'Indicative_Total_Investment_Portfolio_Propose',
                'Indicative_of_Total_Investment_Portfolio_propose'
            ];

            const booleanFields = ['Email_Opt_Out'];

            Object.keys(formData).forEach(formField => {
                if (formField === 'promoterSubform') {
                    // Handle promoter subform data
                    if (formData[formField] && formData[formField].length > 0) {
                        crmData.Details_of_Promoters_Su = formData[formField];
                    }
                } else if (formField === 'uboSubform') {
                    // Handle UBO subform data
                    if (formData[formField] && formData[formField].length > 0) {
                        crmData.Details_of_UBO = formData[formField];
                    }
                } else {
                    // Use layout-specific mapping first
                    let crmField = layoutFieldMapping[formField];

                    // If not found, try global mapping as fallback
                    // if (!crmField) {
                    //     crmField = Object.keys(FIELD_MAPPING).find(key => FIELD_MAPPING[key] === formField);
                    // }

                    if (crmField) {
                        let value = formData[formField];

                        // Only process non-empty values
                        if (value !== null && value !== undefined && value !== '') {
                            // Handle special field conversions based on data type
                            if (booleanFields.includes(crmField)) {
                                value = (value === 'Yes' || value === true || value === 'true' || value === 1);
                            } else if (integerFields.includes(crmField)) {
                                // Convert to integer - enhanced for Third Holder phone fields
                                const cleanValue = value.toString().replace(/\D/g, '');
                                if (cleanValue.length > 0) {
                                    const numValue = parseInt(cleanValue, 10);
                                    if (!isNaN(numValue) && numValue > 0) {
                                        value = numValue; // Send as integer
                                        console.log(`Converting ${crmField} to integer:`, value, typeof value);
                                    } else {
                                        // Skip invalid values
                                        console.warn(`Skipping invalid integer value for ${crmField}: ${value}`);
                                        return;
                                    }
                                } else {
                                    // Skip empty values
                                    console.warn(`Skipping empty value for integer field ${crmField}`);
                                    return;
                                }
                                crmData[crmField] = value;
                            } else if (phoneFields.includes(crmField)) {
                                // Phone fields: keep as string, but clean and validate
                                const cleanPhone = value.toString().replace(/\D/g, '');
                                if (cleanPhone.length >= 10) {
                                    value = cleanPhone; // Keep as string for phone type
                                } else if (cleanPhone.length > 0) {
                                    // If there are some digits but less than 10, still keep it as string
                                    value = cleanPhone;
                                } else {
                                    // Skip completely invalid phone numbers
                                    console.warn(`Invalid phone number for ${crmField}: ${value}`);
                                    return;
                                }
                            } else if (emailFields.includes(crmField)) {
                                // Email fields: keep as clean string and validate basic format
                                value = value.toString().trim();
                                if (value && !value.includes('@') && value !== '-None-') {
                                    console.warn(`Invalid email format for ${crmField}: ${value}`);
                                }
                            } else if (picklistFields.includes(crmField)) {
                                // Picklist fields: ensure string format and handle -None-
                                value = value.toString().trim();
                                if (value === '-None-' || value === '') {
                                    // Skip empty picklist values
                                    return;
                                }
                            } else if (textFields.includes(crmField)) {
                                // Text fields: keep as string, just clean whitespace
                                value = value.toString().trim();
                            } else if (floatFields.includes(crmField)) {
                                // Convert to float
                                const floatValue = parseFloat(value);
                                if (!isNaN(floatValue)) {
                                    value = floatValue;
                                } else {
                                    // Skip invalid float values
                                    console.warn(`Invalid float value for ${crmField}: ${value}`);
                                    return;
                                }
                            }

                            crmData[crmField] = value;
                        } else {
                            // IMPORTANT: Skip empty values entirely - don't send them to CRM
                            console.log(`Skipping empty value for field ${crmField}`);
                            return;
                        }
                    } else {
                        console.warn(`No mapping found for form field: ${formField}`);
                    }
                }
            });

            console.log('Converted to CRM format:', crmData);
            return crmData;
        }

        // ...existing code...

        // ...existing code...

        function showAlert(message, type = 'info') {
            // Create alert element if it doesn't exist
            let alertContainer = document.querySelector('.alert-container');
            if (!alertContainer) {
                alertContainer = document.createElement('div');
                alertContainer.className = 'alert-container';
                alertContainer.style.cssText = `
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    z-index: 10000;
                    max-width: 400px;
                `;
                document.body.appendChild(alertContainer);
            }

            const alertElement = document.createElement('div');
            alertElement.className = `alert alert-${type}`;
            alertElement.style.cssText = `
                padding: 12px 16px;
                margin-bottom: 10px;
                border-radius: 4px;
                border: 1px solid;
                animation: slideIn 0.3s ease;
            `;

            // Set colors based on type
            switch (type) {
                case 'success':
                    alertElement.style.backgroundColor = '#d4edda';
                    alertElement.style.borderColor = '#c3e6cb';
                    alertElement.style.color = '#155724';
                    break;
                case 'error':
                    alertElement.style.backgroundColor = '#f8d7da';
                    alertElement.style.borderColor = '#f5c6cb';
                    alertElement.style.color = '#721c24';
                    break;
                case 'warning':
                    alertElement.style.backgroundColor = '#fff3cd';
                    alertElement.style.borderColor = '#ffeaa7';
                    alertElement.style.color = '#856404';
                    break;
                default:
                    alertElement.style.backgroundColor = '#d1ecf1';
                    alertElement.style.borderColor = '#bee5eb';
                    alertElement.style.color = '#0c5460';
            }

            alertElement.textContent = message;
            alertContainer.appendChild(alertElement);

            // Auto remove after 5 seconds
            setTimeout(() => {
                if (alertElement.parentNode) {
                    alertElement.parentNode.removeChild(alertElement);
                }
            }, 5000);
        }

        function showLoading(show) {
            const loadingScreen = document.getElementById('loadingScreen');
            if (loadingScreen) {
                if (show) {
                    loadingScreen.classList.remove('hidden');
                } else {
                    loadingScreen.classList.add('hidden');
                }
            }
        }

        async function getCurrentRecordId() {
            try {
                if (!WIDGET_CONFIG.isZohoInitialized) {
                    return null;
                }

                const entityInfo = await ZOHO.CRM.UI.Record.getSelectedRecords();
                if (entityInfo && entityInfo.data && entityInfo.data.length > 0) {
                    return entityInfo.data[0].id;
                }
                return null;
            } catch (error) {
                console.error('Error getting current record ID:', error);
                return null;
            }
        }
        // Photo Upload Handler Functions
        // Enhanced Photo Upload Handler Functions
        // Enhanced Photo Upload Handler Functions
        function handlePhotoUpload(input, holderType) {
            const file = input.files[0];
            if (!file) return;

            // Validate file type
            const validTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif'];
            if (!validTypes.includes(file.type)) {
                showAlert('Please upload a valid image file (JPG, PNG, GIF)', 'error');
                input.value = '';
                return;
            }

            // Validate file size (2MB limit)
            if (file.size > 2 * 1024 * 1024) {
                showAlert('File size must be less than 2MB', 'error');
                input.value = '';
                return;
            }

            // Preview the image
            const reader = new FileReader();
            reader.onload = function (e) {
                const preview = document.getElementById(`preview${holderType}`);
                const photoBox = document.getElementById(`photoBox${holderType}`);
                const info = document.getElementById(`info${holderType}`);

                if (!preview || !photoBox || !info) {
                    console.error('Photo elements not found for', holderType);
                    return;
                }

                // Clear existing content
                preview.innerHTML = '';

                // Create and add image element
                const img = document.createElement('img');
                img.src = e.target.result;
                img.alt = `${holderType} Holder Photo`;
                img.style.maxWidth = '100%';
                img.style.maxHeight = '100%';
                img.style.objectFit = 'cover';
                img.style.borderRadius = '4px';
                preview.appendChild(img);

                // Update states
                preview.classList.add('has-image');
                photoBox.classList.add('has-photo');
                info.textContent = `✓ ${file.name}`;
                info.classList.add('success');

                // Store photo data for persistence
                storePhotoData(holderType, {
                    name: file.name,
                    size: file.size,
                    type: file.type,
                    dataUrl: e.target.result
                });

                // IMPORTANT: Clear any deletion marks when new photo is uploaded
                clearPhotoDeletionMark(holderType);

                showAlert(`${holderType} Holder photo uploaded successfully!`, 'success');
            };

            reader.readAsDataURL(file);
        }

        //     function removePhoto(holderType) {
        //         console.log('Removing photo for:', holderType);

        //         const input = document.getElementById(`photo${holderType}Holder`);
        //         const preview = document.getElementById(`preview${holderType}`);
        //         const photoBox = document.getElementById(`photoBox${holderType}`);
        //         const info = document.getElementById(`info${holderType}`);

        //         if (!input || !preview || !photoBox || !info) {
        //             console.error('Photo elements not found for removal:', holderType);
        //             return;
        //         }

        //         // Clear the input
        //         input.value = '';

        //         // Reset preview
        //         preview.innerHTML = `
        //     <div class="photo-placeholder">
        //         <i>👤</i>
        //         <div>Click to upload<br>${holderType} Holder Photo</div>
        //     </div>
        // `;

        //         // Reset states
        //         preview.classList.remove('has-image');
        //         photoBox.classList.remove('has-photo');
        //         info.textContent = 'No photo selected';
        //         info.classList.remove('success');

        //         // Remove stored photo data
        //         removeStoredPhotoData(holderType);

        //         showAlert(`${holderType} Holder photo removed`, 'info');
        //     }

        // Photo data storage functions for persistence
        function storePhotoData(holderType, photoData) {
            try {
                const storageKey = `widget_photo_${holderType}_${WIDGET_CONFIG.recordId || 'new'}`;
                localStorage.setItem(storageKey, JSON.stringify(photoData));
                console.log('Photo data stored for:', holderType);
            } catch (error) {
                console.error('Error storing photo data:', error);
            }
        }

        function getStoredPhotoData(holderType) {
            try {
                const storageKey = `widget_photo_${holderType}_${WIDGET_CONFIG.recordId || 'new'}`;
                const data = localStorage.getItem(storageKey);
                return data ? JSON.parse(data) : null;
            } catch (error) {
                console.error('Error retrieving photo data:', error);
                return null;
            }
        }

        function removeStoredPhotoData(holderType) {
            try {
                const storageKey = `widget_photo_${holderType}_${WIDGET_CONFIG.recordId || 'new'}`;
                localStorage.removeItem(storageKey);
                console.log('Photo data removed for:', holderType);
            } catch (error) {
                console.error('Error removing photo data:', error);
            }
        }

        // Function to restore photos when form loads
        function restoreStoredPhotos() {
            ['First', 'Second', 'Third'].forEach(holderType => {
                const photoData = getStoredPhotoData(holderType);
                if (photoData && photoData.dataUrl) {
                    const preview = document.getElementById(`preview${holderType}`);
                    const photoBox = document.getElementById(`photoBox${holderType}`);
                    const info = document.getElementById(`info${holderType}`);

                    if (preview && photoBox && info) {
                        // Restore the image
                        preview.innerHTML = '';
                        const img = document.createElement('img');
                        img.src = photoData.dataUrl;
                        img.alt = `${holderType} Holder Photo`;
                        img.style.maxWidth = '100%';
                        img.style.maxHeight = '100%';
                        img.style.objectFit = 'cover';
                        img.style.borderRadius = '4px';
                        preview.appendChild(img);

                        // Update states
                        preview.classList.add('has-image');
                        photoBox.classList.add('has-photo');
                        info.textContent = `✓ ${photoData.name}`;
                        info.classList.add('success');

                        console.log('Restored photo for:', holderType);
                    }
                }
            });
        }

        // Enhanced click handlers initialization
        function initializePhotoUploadHandlers() {
            ['First', 'Second', 'Third'].forEach(holderType => {
                const photoBox = document.getElementById(`photoBox${holderType}`);
                const input = document.getElementById(`photo${holderType}Holder`);
                const removeBtn = document.querySelector(`#photoBox${holderType} .remove-photo-btn`);

                if (photoBox && input) {
                    // Add click handler for photo box (excluding remove button)
                    photoBox.addEventListener('click', function (e) {
                        // Don't trigger file input if remove button was clicked
                        if (e.target.classList.contains('remove-photo-btn')) {
                            return;
                        }

                        // Don't trigger if clicked on input itself
                        if (e.target !== input) {
                            e.preventDefault();
                            e.stopPropagation();
                            input.click();
                        }
                    });
                }

                // Ensure remove button works
                if (removeBtn) {
                    removeBtn.addEventListener('click', function (e) {
                        e.preventDefault();
                        e.stopPropagation();
                        removePhoto(holderType);
                    });
                }
            });
        }

        //     function removePhoto(holderType) {
        //         console.log('Removing photo for:', holderType);

        //         const input = document.getElementById(`photo${holderType}Holder`);
        //         const preview = document.getElementById(`preview${holderType}`);
        //         const photoBox = document.getElementById(`photoBox${holderType}`);
        //         const info = document.getElementById(`info${holderType}`);

        //         if (!input || !preview || !photoBox || !info) {
        //             console.error('Photo elements not found for removal:', holderType);
        //             return;
        //         }

        //         // Clear the input
        //         input.value = '';

        //         // Reset preview
        //         preview.innerHTML = `
        //     <div class="photo-placeholder">
        //         <i>👤</i>
        //         <div>Click to upload<br>${holderType} Holder Photo</div>
        //     </div>
        // `;

        //         // Reset states
        //         preview.classList.remove('has-image');
        //         photoBox.classList.remove('has-photo');
        //         info.textContent = 'No photo selected';
        //         info.classList.remove('success');

        //         // Remove stored photo data
        //         removeStoredPhotoData(holderType);

        //         showAlert(`${holderType} Holder photo removed`, 'info');
        //     }

        // Photo data storage functions for persistence
        function storePhotoData(holderType, photoData) {
            try {
                const storageKey = `widget_photo_${holderType}_${WIDGET_CONFIG.recordId || 'new'}`;
                localStorage.setItem(storageKey, JSON.stringify(photoData));
                console.log('Photo data stored for:', holderType);
            } catch (error) {
                console.error('Error storing photo data:', error);
            }
        }

        function getStoredPhotoData(holderType) {
            try {
                const storageKey = `widget_photo_${holderType}_${WIDGET_CONFIG.recordId || 'new'}`;
                const data = localStorage.getItem(storageKey);
                return data ? JSON.parse(data) : null;
            } catch (error) {
                console.error('Error retrieving photo data:', error);
                return null;
            }
        }

        function removeStoredPhotoData(holderType) {
            try {
                const storageKey = `widget_photo_${holderType}_${WIDGET_CONFIG.recordId || 'new'}`;
                localStorage.removeItem(storageKey);
                console.log('Photo data removed for:', holderType);
            } catch (error) {
                console.error('Error removing photo data:', error);
            }
        }

        // Function to restore photos when form loads
        function restoreStoredPhotos() {
            ['First', 'Second', 'Third'].forEach(holderType => {
                const photoData = getStoredPhotoData(holderType);
                if (photoData && photoData.dataUrl) {
                    const preview = document.getElementById(`preview${holderType}`);
                    const photoBox = document.getElementById(`photoBox${holderType}`);
                    const info = document.getElementById(`info${holderType}`);

                    if (preview && photoBox && info) {
                        // Restore the image
                        preview.innerHTML = '';
                        const img = document.createElement('img');
                        img.src = photoData.dataUrl;
                        img.alt = `${holderType} Holder Photo`;
                        img.style.maxWidth = '100%';
                        img.style.maxHeight = '100%';
                        img.style.objectFit = 'cover';
                        img.style.borderRadius = '4px';
                        preview.appendChild(img);

                        // Update states
                        preview.classList.add('has-image');
                        photoBox.classList.add('has-photo');
                        info.textContent = `✓ ${photoData.name}`;
                        info.classList.add('success');

                        console.log('Restored photo for:', holderType);
                    }
                }
            });
        }

        // Enhanced click handlers initialization
        function initializePhotoUploadHandlers() {
            ['First', 'Second', 'Third'].forEach(holderType => {
                const photoBox = document.getElementById(`photoBox${holderType}`);
                const input = document.getElementById(`photo${holderType}Holder`);
                const removeBtn = document.querySelector(`#photoBox${holderType} .remove-photo-btn`);

                if (photoBox && input) {
                    // Add click handler for photo box (excluding remove button)
                    photoBox.addEventListener('click', function (e) {
                        // Don't trigger file input if remove button was clicked
                        if (e.target.classList.contains('remove-photo-btn')) {
                            return;
                        }

                        // Don't trigger if clicked on input itself
                        if (e.target !== input) {
                            e.preventDefault();
                            e.stopPropagation();
                            input.click();
                        }
                    });
                }

                // Ensure remove button works
                if (removeBtn) {
                    removeBtn.addEventListener('click', function (e) {
                        e.preventDefault();
                        e.stopPropagation();
                        removePhoto(holderType);
                    });
                }
            });
        }

        function removePhoto(holderType) {
            console.log('Removing photo for:', holderType);

            const input = document.getElementById(`photo${holderType}Holder`);
            const preview = document.getElementById(`preview${holderType}`);
            const photoBox = document.getElementById(`photoBox${holderType}`);
            const info = document.getElementById(`info${holderType}`);

            if (!input || !preview || !photoBox || !info) {
                console.error('Photo elements not found for removal:', holderType);
                return;
            }

            // Clear the input
            input.value = '';

            // Reset preview
            preview.innerHTML = `
        <div class="photo-placeholder">
            <i>👤</i>
            <div>Click to upload<br>${holderType} Holder Photo</div>
        </div>
    `;

            // Reset states
            preview.classList.remove('has-image');
            photoBox.classList.remove('has-photo');
            info.textContent = 'No photo selected';
            info.classList.remove('success');

            // IMPORTANT: Remove stored photo data immediately
            removeStoredPhotoData(holderType);

            // IMPORTANT: Mark photo for deletion in form data
            markPhotoForDeletion(holderType);

            showAlert(`${holderType} Holder photo removed`, 'info');
        }
        function markPhotoForDeletion(holderType) {
            try {
                const deletionKey = `widget_photo_deleted_${holderType}_${WIDGET_CONFIG.recordId || 'new'}`;
                localStorage.setItem(deletionKey, 'true');
                console.log('Photo marked for deletion:', holderType);
            } catch (error) {
                console.error('Error marking photo for deletion:', error);
            }
        }
        function isPhotoMarkedForDeletion(holderType) {
            try {
                const deletionKey = `widget_photo_deleted_${holderType}_${WIDGET_CONFIG.recordId || 'new'}`;
                return localStorage.getItem(deletionKey) === 'true';
            } catch (error) {
                console.error('Error checking photo deletion status:', error);
                return false;
            }
        }
        function clearPhotoDeletionMark(holderType) {
            try {
                const deletionKey = `widget_photo_deleted_${holderType}_${WIDGET_CONFIG.recordId || 'new'}`;
                localStorage.removeItem(deletionKey);
                console.log('Photo deletion mark cleared:', holderType);
            } catch (error) {
                console.error('Error clearing photo deletion mark:', error);
            }
        }

        // Initialize photo upload areas on page load
        document.addEventListener('DOMContentLoaded', function () {
            // Add click handlers for photo boxes
            ['First', 'Second', 'Third'].forEach(holderType => {
                const photoBox = document.getElementById(`photoBox${holderType}`);
                const input = document.getElementById(`photo${holderType}Holder`);

                if (photoBox && input) {
                    photoBox.addEventListener('click', function (e) {
                        if (e.target !== input && !e.target.classList.contains('remove-photo-btn')) {
                            input.click();
                        }
                    });
                }
            });
        });
        function cleanupPhotoStorage() {
            ['First', 'Second', 'Third'].forEach(holderType => {
                try {
                    const storageKey = `widget_photo_${holderType}_${WIDGET_CONFIG.recordId || 'new'}`;
                    const deletionKey = `widget_photo_deleted_${holderType}_${WIDGET_CONFIG.recordId || 'new'}`;

                    // Remove both photo data and deletion marks
                    localStorage.removeItem(storageKey);
                    localStorage.removeItem(deletionKey);

                    console.log('Cleaned up photo storage for:', holderType);
                } catch (error) {
                    console.error('Error cleaning up photo storage:', error);
                }
            });
        }

        // Add this JavaScript function to handle the permanent address checkbox functionality
        function handlePermanentAddressCheckbox() {
            const checkbox = document.getElementById('fh_permanentAddress');

            if (!checkbox) {
                console.error('Permanent address checkbox not found');
                return;
            }

            checkbox.addEventListener('change', function () {
                if (this.checked) {
                    // Auto-fill permanent address fields from correspondence address fields
                    autoFillPermanentAddress();
                    showAlert('Permanent address fields auto-filled from correspondence address', 'success');
                } else {
                    // Clear permanent address fields when unchecked
                    clearPermanentAddressFields();
                    showAlert('Permanent address fields cleared', 'info');
                }
            });
        }

        function autoFillPermanentAddress() {
            // Mapping of correspondence address fields to permanent address fields
            const fieldMappings = {
                // Source field -> Target field
                'fh_addressCorrespondence': 'fh_addressCorrespondence', // Not copied (different field)
                'fh_cityTownVillage': 'fh_cityTownVillagePA',
                'fh_pincode': 'fh_pincodePA',
                'fh_state': 'fh_statePA',
                'fh_country': 'fh_countryPA',
                'fh_telephone': 'fh_telephonePA',
                'fh_mobile': 'fh_mobilePA',
                'fh_emailIdAD': 'fh_emailIdAD' // Email stays same (not copied to permanent)
            };

            // Copy values from correspondence address to permanent address
            Object.keys(fieldMappings).forEach(sourceFieldId => {
                const targetFieldId = fieldMappings[sourceFieldId];

                // Skip if source and target are the same (like email)
                if (sourceFieldId === targetFieldId) return;

                const sourceField = document.getElementById(sourceFieldId);
                const targetField = document.getElementById(targetFieldId);

                if (sourceField && targetField && sourceField.value.trim() !== '') {
                    targetField.value = sourceField.value;

                    // Add visual feedback
                    targetField.style.backgroundColor = '#e7f3ff';
                    setTimeout(() => {
                        targetField.style.backgroundColor = '';
                    }, 1000);

                    console.log(`Copied ${sourceFieldId} (${sourceField.value}) to ${targetFieldId}`);
                }
            });
        }

        function clearPermanentAddressFields() {
            // Clear all permanent address fields
            const permanentFields = [
                'fh_cityTownVillagePA',
                'fh_pincodePA',
                'fh_statePA',
                'fh_countryPA',
                'fh_telephonePA',
                'fh_mobilePA'
            ];

            permanentFields.forEach(fieldId => {
                const field = document.getElementById(fieldId);
                if (field) {
                    field.value = '';

                    // Add visual feedback
                    field.style.backgroundColor = '#fff2f2';
                    setTimeout(() => {
                        field.style.backgroundColor = '';
                    }, 1000);
                }
            });
        }

        // Add real-time sync functionality (optional)
        function setupRealTimeAddressSync() {
            const correspondenceFields = [
                'fh_cityTownVillage',
                'fh_pincode',
                'fh_state',
                'fh_country',
                'fh_telephone',
                'fh_mobile'
            ];

            correspondenceFields.forEach(fieldId => {
                const field = document.getElementById(fieldId);
                if (field) {
                    field.addEventListener('input', function () {
                        const checkbox = document.getElementById('fh_permanentAddress');
                        if (checkbox && checkbox.checked) {
                            // Real-time sync if checkbox is checked
                            autoFillPermanentAddress();
                        }
                    });
                }
            });
        }

        // Enhanced initialization function
        function initializePermanentAddressFunctionality() {
            // Set up checkbox handler
            handlePermanentAddressCheckbox();

            // Set up real-time sync (optional feature)
            setupRealTimeAddressSync();

            console.log('Permanent address functionality initialized');
        }

        // Add this to your existing DOMContentLoaded event listener
        document.addEventListener('DOMContentLoaded', function () {
            // Add this line to your existing DOMContentLoaded function
            setTimeout(() => {
                initializePermanentAddressFunctionality();
            }, 1000); // Small delay to ensure form is loaded
        });

        // Enhanced initialization function to handle all three holders
        function initializePermanentAddressFunctionality() {
            // Set up checkbox handlers for all holders
            handlePermanentAddressCheckbox('fh'); // First Holder
            handlePermanentAddressCheckbox('sh'); // Second Holder  
            handlePermanentAddressCheckbox('th'); // Third Holder

            // Set up real-time sync for all holders
            setupRealTimeAddressSync('fh'); // First Holder
            setupRealTimeAddressSync('sh'); // Second Holder
            setupRealTimeAddressSync('th'); // Third Holder

            console.log('Permanent address functionality initialized for all holders');
        }

        // Updated generic function to handle any holder
        function handlePermanentAddressCheckbox(holderPrefix) {
            const checkbox = document.getElementById(`${holderPrefix}_permanentAddress`);

            if (!checkbox) {
                console.error(`Permanent address checkbox not found for ${holderPrefix}`);
                return;
            }

            checkbox.addEventListener('change', function () {
                if (this.checked) {
                    autoFillPermanentAddress(holderPrefix);
                    lockPermanentAddressFields(holderPrefix);
                    showAlert(`${getHolderName(holderPrefix)} permanent address fields auto-filled and locked`, 'success');
                } else {
                    clearPermanentAddressFields(holderPrefix);
                    unlockPermanentAddressFields(holderPrefix);
                    showAlert(`${getHolderName(holderPrefix)} permanent address fields cleared and unlocked`, 'info');
                }

                // Save checkbox state
                saveCheckboxState(holderPrefix, this.checked);
            });
        }

        // Updated generic auto-fill function
        function autoFillPermanentAddress(holderPrefix) {
            const fieldMappings = {
                'cityTownVillage': 'cityTownVillagePA',
                'pincode': 'pincodePA',
                'state': 'statePA',
                'country': 'countryPA',
                'telephone': 'telephonePA',
                'mobile': 'mobilePA'
            };

            Object.keys(fieldMappings).forEach(sourceField => {
                const targetField = fieldMappings[sourceField];
                const sourceFieldId = `${holderPrefix}_${sourceField}`;
                const targetFieldId = `${holderPrefix}_${targetField}`;

                const sourceElement = document.getElementById(sourceFieldId);
                const targetElement = document.getElementById(targetFieldId);

                if (sourceElement && targetElement && sourceElement.value.trim() !== '') {
                    targetElement.value = sourceElement.value;

                    // Visual feedback
                    targetElement.style.backgroundColor = '#e7f3ff';
                    targetElement.style.borderColor = '#2196f3';
                    setTimeout(() => {
                        targetElement.style.backgroundColor = '#f0f7ff';
                    }, 1000);

                    console.log(`Copied ${sourceFieldId} to ${targetFieldId}`);
                }
            });
        }

        // Updated generic clear function
        function clearPermanentAddressFields(holderPrefix) {
            const permanentFields = [
                'cityTownVillagePA', 'pincodePA', 'statePA',
                'countryPA', 'telephonePA', 'mobilePA'
            ];

            permanentFields.forEach(field => {
                const fieldElement = document.getElementById(`${holderPrefix}_${field}`);
                if (fieldElement) {
                    fieldElement.value = '';

                    // Visual feedback
                    fieldElement.style.backgroundColor = '#fff2f2';
                    setTimeout(() => {
                        fieldElement.style.backgroundColor = '';
                    }, 1000);
                }
            });
        }

        // Lock permanent address fields
        function lockPermanentAddressFields(holderPrefix) {
            const permanentFields = [
                'cityTownVillagePA', 'pincodePA', 'statePA',
                'countryPA', 'telephonePA', 'mobilePA'
            ];

            permanentFields.forEach(field => {
                const fieldElement = document.getElementById(`${holderPrefix}_${field}`);
                if (fieldElement && fieldElement.value.trim() !== '') {
                    fieldElement.disabled = true;
                    fieldElement.style.backgroundColor = '#f0f7ff';
                    fieldElement.style.borderColor = '#2196f3';
                    fieldElement.style.cursor = 'not-allowed';
                    fieldElement.title = 'This field is auto-filled from correspondence address. Uncheck the checkbox above to edit manually.';
                }
            });
        }

        // Unlock permanent address fields
        function unlockPermanentAddressFields(holderPrefix) {
            const permanentFields = [
                'cityTownVillagePA', 'pincodePA', 'statePA',
                'countryPA', 'telephonePA', 'mobilePA'
            ];

            permanentFields.forEach(field => {
                const fieldElement = document.getElementById(`${holderPrefix}_${field}`);
                if (fieldElement) {
                    fieldElement.disabled = false;
                    fieldElement.style.backgroundColor = '';
                    fieldElement.style.borderColor = '';
                    fieldElement.style.cursor = '';
                    fieldElement.title = '';
                }
            });
        }

        // Save checkbox state for each holder
        function saveCheckboxState(holderPrefix, isChecked) {
            try {
                const stateKey = `widget_checkbox_permanent_address_${holderPrefix}_${WIDGET_CONFIG.recordId || 'new'}`;
                localStorage.setItem(stateKey, isChecked.toString());
                console.log(`Checkbox state saved for ${holderPrefix}:`, isChecked);
            } catch (error) {
                console.error('Error saving checkbox state:', error);
            }
        }

        // Get saved checkbox state for each holder
        function getSavedCheckboxState(holderPrefix) {
            try {
                const stateKey = `widget_checkbox_permanent_address_${holderPrefix}_${WIDGET_CONFIG.recordId || 'new'}`;
                const savedState = localStorage.getItem(stateKey);
                return savedState === 'true';
            } catch (error) {
                console.error('Error getting checkbox state:', error);
                return false;
            }
        }

        // Restore checkbox state for each holder
        function restoreCheckboxState(holderPrefix) {
            const checkbox = document.getElementById(`${holderPrefix}_permanentAddress`);
            if (!checkbox) return;

            const savedState = getSavedCheckboxState(holderPrefix);

            if (savedState) {
                checkbox.checked = true;
                setTimeout(() => {
                    autoFillPermanentAddress(holderPrefix);
                    lockPermanentAddressFields(holderPrefix);
                    console.log(`Checkbox state restored and fields locked for ${holderPrefix}`);
                }, 100);
            } else {
                checkbox.checked = false;
                unlockPermanentAddressFields(holderPrefix);
                console.log(`Checkbox state restored as unchecked for ${holderPrefix}`);
            }
        }

        // Enhanced real-time sync for any holder
        function setupRealTimeAddressSync(holderPrefix) {
            const correspondenceFields = [
                'cityTownVillage', 'pincode', 'state',
                'country', 'telephone', 'mobile'
            ];

            correspondenceFields.forEach(field => {
                const fieldElement = document.getElementById(`${holderPrefix}_${field}`);
                if (fieldElement) {
                    fieldElement.addEventListener('input', function () {
                        const checkbox = document.getElementById(`${holderPrefix}_permanentAddress`);
                        if (checkbox && checkbox.checked) {
                            autoFillPermanentAddress(holderPrefix);
                            setTimeout(() => {
                                lockPermanentAddressFields(holderPrefix);
                            }, 50);
                        }
                    });
                }
            });
        }

        // Helper function to get holder display name
        function getHolderName(holderPrefix) {
            switch (holderPrefix) {
                case 'fh': return 'First Holder';
                case 'sh': return 'Second Holder';
                case 'th': return 'Third Holder';
                default: return 'Holder';
            }
        }
        // ...rest of your existing script code...
    </script>
</body>

</html>